@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Areas.LeagueMaster.Shared
@using System_do_zarządzania_ligą_piłkarską.Client.Components
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs.Teams
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using Microsoft.AspNetCore.Authorization

@page "/league-master/created-teams"
@layout LeagueMasterLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AlertManager AlertManager
@attribute [Authorize(Roles = "LeagueMaster")]

<PageTitle>Stworzone drużyny</PageTitle>

<div class="container py-5">
    <div class="row mb-4">
        <div class="col text-center">
            <h3 class="display-5 fw-bold text-primary">Stworzone drużyny</h3>
        </div>
    </div>

    <Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />

    @if (teams != null)
    {
        <table class="table table-hover table-bordered shadow-sm">
            <thead class="table-primary">
                <tr>
                    <th class="text-center">Nazwa</th>
                    <th class="text-center">Miasto</th>
                    <th class="text-center">Kraj</th>
                    <th class="text-center">Stadion</th>
                    <th class="text-center">Rok założenia</th>
                    <th class="text-center">Trener</th>
                    <th class="text-center">Zdjęcie</th>
                    <th class="text-center">Działania</th>
                </tr>
            </thead>
            <tbody>
                @if (teams.Count == 0)
                {
                    <tr>
                        <td colspan="7" class="text-center">Brak danych do wyświetlenia</td>
                    </tr>
                }
                else
                {
                    @foreach (var team in teams)
                    {
                        <tr>
                            <td class="align-middle text-center">@team.Name</td>
                            <td class="align-middle text-center">@team.City</td>
                            <td class="align-middle text-center">@team.Country</td>
                            <td class="align-middle text-center">@team.Stadium</td>
                            <td class="align-middle text-center">@team.YearOfFoundation</td>
                            <td class="align-middle text-center">
                                @if (team.HasCoach)
                                {
                                    <span>@team.Coach.FirstName @team.Coach.LastName</span>
                                    <button class="btn btn-danger btn-sm ms-2" @onclick="() => DeleteCoachFromTeam(team.Id)">
                                        Usuń trenera
                                    </button>
                                }
                                else
                                {
                                    <div class="d-flex justify-content-center">
                                        <InputText @bind-Value="coachEmailToAssign" class="form-control me-2" Placeholder="Wpisz e-mail trenera" />
                                        <button class="btn btn-primary btn-sm" @onclick="() => AssignCoachToTeam(team.Id, coachEmailToAssign)">
                                            Przypisz
                                        </button>
                                    </div>
                                }
                            </td>
                            <td class="align-middle text-center">
                                @if (team.Image != null)
                                {
                                    <img src="@team.Image.Path" alt="Herb drużyny" class="img-thumbnail" style="max-width: 100px; max-height: 100px;">
                                }
                                else
                                {
                                    <span class="text-muted">Brak zdjęcia</span>
                                }
                            </td>
                            <td class="align-middle text-center">
                                <div class="btn-group">
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteTeam(team.Id)">
                                        Usuń
                                    </button>
                                    <button class="btn btn-info btn-sm" @onclick="() => GoToTeamManagement(team.Id)">
                                        Zarządzaj
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="text-center">
            <span class="spinner-border text-primary" role="status"></span>
            <span class="visually-hidden">Ładowanie...</span>
        </div>
    }
</div>




@code {
    private List<TeamInfoDTO>? teams;
    private string coachEmailToAssign = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadTeams();
    }

    private async Task LoadTeams()
    {
        teams = await Http.GetFromJsonAsync<List<TeamInfoDTO>>("api/teams/league-master/created-teams");
    }

    private async Task<string> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private async Task DeleteCoachFromTeam(int teamId)
    {
        var result = await Http.DeleteAsync($"api/teams/league-master/{teamId}/remove-coach");

        if (result.IsSuccessStatusCode)
        {
            AlertManager.DisplayAlert($"Usunięto trenera z wybranego zespołu!", "success");
            await LoadTeams();
        }
        else
        {
            AlertManager.DisplayAlert($"Nie udało się usunąć trenera z wybranego zespołu.", "danger");
        }
    }

    private async Task AssignCoachToTeam(int teamId, string coachEmail)
    {
        var response = await Http.PostAsync($"api/teams/league-master/{teamId}/assign-coach/{coachEmail}", null);

        if (response.IsSuccessStatusCode)
        {
            AlertManager.DisplayAlert($"Dodano trenera do wybranego zespołu!", "success");
            await LoadTeams();
        }
        else
        {
            AlertManager.DisplayAlert($"Nie udało się dodać trenera do wybranego zespołu.", "danger");
        }
        coachEmailToAssign = string.Empty;
    }



    private async Task DeleteTeam(int teamId)
    {
        var result = await Http.DeleteAsync($"api/teams/league-master/{teamId}/remove-team");

        if (result.IsSuccessStatusCode)
        {
            AlertManager.DisplayAlert($"Usunięto drużynę!", "success");
            await LoadTeams();
        }
        else
        {
            AlertManager.DisplayAlert($"Nie udało się usunąć drużyny.", "danger");
        }
    }

    private void GoToTeamManagement(int teamId)
    {
        Navigation.NavigateTo($"/league-master/created-teams/{teamId}");
    }
}