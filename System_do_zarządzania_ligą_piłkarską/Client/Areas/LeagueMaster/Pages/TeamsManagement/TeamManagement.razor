@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Areas.LeagueMaster.Shared
@using System_do_zarządzania_ligą_piłkarską.Client.Components
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs.Teams
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using System_do_zarządzania_ligą_piłkarską.Shared.Enums
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs.Matches
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs.Footballers
@using Microsoft.AspNetCore.Authorization
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs.Images

@page "/league-master/created-teams/{TeamId:int}"
@layout LeagueMasterLayout
@inject HttpClient Http
@inject AlertManager AlertManager
@attribute [Authorize(Roles = "LeagueMaster")]

<PageTitle>Zarządzaj drużyną</PageTitle>

<Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />

<div class="container mt-4">
    <h3>Zarządzaj drużyną</h3>

    @if (team != null)
    {
        <EditForm Model="editTeam" OnValidSubmit="UpdateTeam">
            <div class="row g-3 mb-4">
                <div class="col-md-4">
                    <label for="name" class="form-label">Nazwa drużyny</label>
                    <InputText id="name" class="form-control" @bind-Value="editTeam.Name" />
                </div>
                <div class="col-md-4">
                    <label for="city" class="form-label">Miasto</label>
                    <InputText id="city" class="form-control" @bind-Value="editTeam.City" />
                </div>
                <div class="col-md-4">
                    <label for="country" class="form-label">Kraj</label>
                    <InputText id="country" class="form-control" @bind-Value="editTeam.Country" />
                </div>
                <div class="col-md-6">
                    <label for="stadium" class="form-label">Stadion</label>
                    <InputText id="stadium" class="form-control" @bind-Value="editTeam.Stadium" />
                </div>
                <div class="col-md-6">
                    <label for="year" class="form-label">Rok założenia</label>
                    <InputNumber id="year" class="form-control" @bind-Value="editTeam.YearOfFoundation" />
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Zapisz zmiany</button>
        </EditForm>

        @if (team.Image == null)
        {
            <label class="btn btn-sm btn-info">
                Dodaj herb drużyny
                <InputFile OnChange="e => UploadPhoto(e, team.Id, false)" class="d-none" />
            </label>
        }
        else
        {
            <label class="btn btn-sm btn-warning mt-2">
                Zmień herb drużyny
                <InputFile OnChange="e => UploadPhoto(e, team.Id, false)" class="d-none" />
            </label>
        }

        <hr class="my-4" />

        <h4>Piłkarze drużyny</h4>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Imię</th>
                    <th>Nazwisko</th>
                    <th>Numer</th>
                    <th>Pozycja</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var player in team.Footballers)
                {
                    <tr>
                        <td>@player.Id</td>
                        <td>@player.FirstName</td>
                        <td>@player.LastName</td>
                        <td>@player.ShirtNumber</td>
                        <td>@PositionHelper.GetDisplayName(player.Position)</td>
                        <td>
                            @if (player.Image == null)
                            {
                                <label class="btn btn-sm btn-info">
                                    Dodaj zdjęcie
                                    <InputFile OnChange="e => UploadPhoto(e, player.Id, true)" class="d-none" />
                                </label>
                            }
                            else
                            {
                                <br />
                                <label class="btn btn-sm btn-warning mt-2">
                                    Zmień zdjęcie
                                    <InputFile OnChange="e => UploadPhoto(e, player.Id, true)" class="d-none" />
                                </label>
                            }
                        </td>

                    </tr>
                }
            </tbody>
        </table>

        <h4>Dodaj nowego piłkarza</h4>
        <EditForm Model="newPlayer" OnValidSubmit="AddPlayer">
            <div class="row g-3 mb-3">
                <div class="col-md-3">
                    <label for="firstName" class="form-label">Imię</label>
                    <InputText id="firstName" class="form-control" @bind-Value="newPlayer.FirstName" />
                </div>
                <div class="col-md-3">
                    <label for="lastName" class="form-label">Nazwisko</label>
                    <InputText id="lastName" class="form-control" @bind-Value="newPlayer.LastName" />
                </div>
                <div class="col-md-3">
                    <label for="nationality" class="form-label">Narodowość</label>
                    <InputText id="nationality" class="form-control" @bind-Value="newPlayer.Nationality" />
                </div>
                <div class="col-md-2">
                    <label for="shirtNumber" class="form-label">Numer</label>
                    <InputNumber id="shirtNumber" class="form-control" @bind-Value="newPlayer.ShirtNumber" />
                </div>
                <div class="col-md-2">
                    <label for="position" class="form-label">Pozycja</label>
                    <InputSelect id="position" class="form-control" @bind-Value="newPlayer.Position">
                        @foreach (var position in Enum.GetValues(typeof(Position)).Cast<Position>())
                        {
                            <option value="@position">@position</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-1">
                    <label for="height" class="form-label">Wzrost (cm)</label>
                    <InputNumber id="height" class="form-control" @bind-Value="newPlayer.Height" />
                </div>
                <div class="col-md-1">
                    <label for="weight" class="form-label">Waga (kg)</label>
                    <InputNumber id="weight" class="form-control" @bind-Value="newPlayer.Weight" />
                </div>

                <div class="col-md-1">
                    <label for="birthday" class="form-label">Data urodzenia</label>
                    <InputDate id="birthday" class="form-control" @bind-Value="@newPlayer.DateOfBirth" />
                </div>
            </div>
            <button type="submit" class="btn btn-success">Dodaj piłkarza</button>
        </EditForm>
    }
    else
    {
        <div class="alert alert-warning">Ładowanie danych drużyny...</div>
    }
</div>

@code {
    [Parameter] public int TeamId { get; set; }
    private TeamManageDTO? team;
    private NewFootballerDTO newPlayer = new();
    private EditTeamDTO editTeam = new();
    private NewImageDTO newImage = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTeam();
        await LoadEditTeam();
    }

    private async Task LoadTeam()
    {
        team = await Http.GetFromJsonAsync<TeamManageDTO>($"api/teams/league-master/manage-team/{TeamId}");
    }

    private async Task LoadEditTeam()
    {
        editTeam = new EditTeamDTO
        {
            Name = team.Name,
            City = team.City,
            Country = team.Country,
            Stadium = team.Stadium,
            YearOfFoundation = team.YearOfFoundation
        };
    }

    private async Task UpdateTeam()
    {
        var response = await Http.PatchAsJsonAsync($"api/teams/league-master/manage-team", editTeam);
        if (response.IsSuccessStatusCode)
        {
            AlertManager.DisplayAlert("Dane drużyny zostały zaktualizowane.", "success");
        }
        else
        {
            await LoadEditTeam();
            AlertManager.DisplayAlert("Aktualizacja danych drużyny nie powiodła się.", "danger");
        }
    }

    private async Task AddPlayer()
    {
        newPlayer.TeamId = TeamId;
        var response = await Http.PostAsJsonAsync($"api/footballers/league-master/add-new-footballer-to-team", newPlayer);
        if (response.IsSuccessStatusCode)
        {
            AlertManager.DisplayAlert("Piłkarz został dodany.", "success");
            newPlayer = new NewFootballerDTO();
            await LoadTeam();
        }
        else
        {
            AlertManager.DisplayAlert("Dodanie piłkarza nie powiodło się.", "danger");
        }
    }

    private async Task UploadPhoto(InputFileChangeEventArgs e, int entityId, bool refersToFootballer)
    {
        if (e.File != null)
        {
            var file = e.File; 

            // przesyłanie pliku i danych
            var formData = new MultipartFormDataContent();
            var stream = file.OpenReadStream(file.Size); 
            formData.Add(new StreamContent(stream), "File", file.Name);


            if(refersToFootballer)
            {
                formData.Add(new StringContent(entityId.ToString()), "FootballerId");
                formData.Add(new StringContent(ImageType.Footballer.ToString()), "Type");
            }
            else
            {
                formData.Add(new StringContent(entityId.ToString()), "TeamId");
                formData.Add(new StringContent(ImageType.Team.ToString()), "Type");
            }

            var response = await Http.PostAsync("api/images", formData);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert("Zdjęcie zostało dodane.", "success");
                await LoadTeam(); 
            }
            else
            {
                AlertManager.DisplayAlert("Nie udało się dodać zdjęcia.", "danger");
            }
        }
    }

    // private async Task EditPlayer(int playerId)
    // {
    //     newPlayer.TeamId = TeamId;
    //     var response = await Http.PostAsJsonAsync($"api/footballers/league-master/edit-footballer", editFootballer);
    //     if (response.IsSuccessStatusCode)
    //     {
    //         AlertManager.DisplayAlert("Edycja piłkarza zakończona powodzeniem.", "success");
    //         newPlayer = new NewFootballerDTO();
    //         await LoadTeam();
    //     }
    //     else
    //     {
    //         AlertManager.DisplayAlert("Edycja piłkarza zakończona niepowodzeniem.", "danger");
    //     }
    // }
}
