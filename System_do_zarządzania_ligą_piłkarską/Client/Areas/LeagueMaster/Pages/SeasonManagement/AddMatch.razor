@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Areas.LeagueMaster.Shared
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs.Matches
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs.Referees
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using System_do_zarządzania_ligą_piłkarską.Client.Components
@using Microsoft.AspNetCore.Authorization

@page "/league-master/leagues/{leagueInfoId:int}/{leagueSeasonId:int}/add-match"
@layout LeagueMasterLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AlertManager AlertManager
@attribute [Authorize(Roles = "LeagueMaster")]

<PageTitle>Dodawanie meczu</PageTitle>

<div class="container py-5">
    <div class="row mb-4 align-items-center">
        <div class="col">
            <button class="btn btn-secondary" @onclick="BackToTheSeasonManagement">
                <i class="fas fa-arrow-left"></i> Wróć
            </button>
            <h3 class="mt-4 text-primary">Dodaj mecz</h3>
        </div>
    </div>

    @if (teams != null && newMatch != null)
    {
        <EditForm Model="newMatch" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" />

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="home" class="form-label fw-bold">Gospodarz</label>
                    <select id="home" class="form-select shadow-sm" @onchange="SetHomeTeamAndStadium">
                        <option value="">-- Wybierz gospodarza --</option>
                        @foreach (var home in teams)
                        {
                            <option value="@home.TeamId">@home.TeamName</option>
                        }
                    </select>
                </div>

                <div class="col-md-6 mb-3">
                    <label for="away" class="form-label fw-bold">Gość</label>
                    <select id="away" class="form-select shadow-sm" @bind="newMatch.AwayTeamId">
                        <option value="">-- Wybierz gościa --</option>
                        @foreach (var away in teams)
                        {
                            <option value="@away.TeamId">@away.TeamName</option>
                        }
                    </select>
                </div>

                <div class="col-md-6 mb-3">
                    <label for="referee" class="form-label fw-bold">Sędzia</label>
                    <select id="referee" class="form-select shadow-sm" @bind="newMatch.RefereeId">
                        <option value="">-- Wybierz sędziego --</option>
                        @foreach (var referee in referees)
                        {
                            <option value="@referee.Id">@referee.FirstName @referee.LastName</option>
                        }
                    </select>
                </div>

                <div class="col-md-6 mb-3">
                    <label for="round" class="form-label fw-bold">Kolejka</label>
                    <select id="round" class="form-select shadow-sm" @bind="newMatch.Round">
                        <option value="">-- Wybierz kolejkę --</option>
                        @for (int i = 1; i <= 50; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                </div>

                <div class="col-md-6 mb-3">
                    <label for="matchDate" class="form-label fw-bold">Data meczu</label>
                    <InputDate id="matchDate" class="form-control shadow-sm" @bind-Value="newMatch.MatchDate" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="matchTime" class="form-label fw-bold">Godzina meczu</label>
                    <InputDate Type="InputDateType.Time" id="matchTime" class="form-control shadow-sm" @bind-Value="newMatch.MatchTime" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="stadium" class="form-label fw-bold">Stadion</label>
                    <InputText id="stadium" class="form-control shadow-sm" @bind-Value="newMatch.FootballStadium" readonly />
                </div>
            </div>

            <button type="submit" class="btn btn-primary mt-3">
                <i class="fas fa-plus"></i> Dodaj mecz
            </button>
        </EditForm>
    }
    else
    {
        <div class="text-center">
            <span class="spinner-border text-primary" role="status"></span>
            <span class="visually-hidden">Ładowanie...</span>
        </div>
    }

    <Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />
</div>


@code {
    [Parameter] public int leagueInfoId { get; set; }
    [Parameter] public int leagueSeasonId { get; set; }

    private LeagueSeasonDTO? season;
    private List<TeamStatDTO>? teams;
    private List<ShortRefereeInfoDTO>? referees;

    private NewMatchDTO newMatch;
    private string? stadium = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }


    private async Task LoadData()
    {
        newMatch = new NewMatchDTO();
        newMatch.MatchDate = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
        season = await Http.GetFromJsonAsync<LeagueSeasonDTO>($"api/leagues/league-master/{leagueInfoId}/{leagueSeasonId}");
        teams = await Http.GetFromJsonAsync<List<TeamStatDTO>>($"api/leagues/{leagueSeasonId}/table");
        referees = await Http.GetFromJsonAsync<List<ShortRefereeInfoDTO>>($"api/referees/league-master/specific-season/{leagueSeasonId}");
    }
    private async Task HandleValidSubmit()
    {
        try
        {
            newMatch.LeagueSeasonId = leagueSeasonId;
            var response = await Http.PostAsJsonAsync("api/matches/league-master", newMatch);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Dodano mecz {MatchInfo()} do wybranego sezonu!", "success");
                Clear();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się dodać meczu {MatchInfo()} do wybranego sezonu.", "danger");
                Clear();
            }
        }
        catch (Exception ex)
        {
            AlertManager.DisplayAlert($"Nie udało się dodać meczu {MatchInfo()} do wybranego sezonu.", "danger");
            Clear();
        }
    }

    private void SetHomeTeamAndStadium(ChangeEventArgs e)
    {
        if (string.IsNullOrEmpty(e.Value?.ToString()))
        {
            newMatch.HomeTeamId = default;
            newMatch.FootballStadium = string.Empty; 
            return;
        }

        newMatch.HomeTeamId = int.Parse(e.Value.ToString());

        var homeTeam = teams?.FirstOrDefault(x => x.TeamId == newMatch.HomeTeamId);
        newMatch.FootballStadium = homeTeam?.Team?.Stadium ?? string.Empty;
    }

    private string MatchInfo()
    {
        var homeTeamName = teams.FirstOrDefault(x => x.TeamId == newMatch.HomeTeamId).TeamName;
        var awayTeamName = teams.FirstOrDefault(x => x.TeamId == newMatch.AwayTeamId).TeamName;
        return $"{homeTeamName} vs {awayTeamName}";
    }

    private void Clear()
    {
        newMatch.RefereeId = default;
        newMatch.LeagueSeasonId = default;
        newMatch.Round = default;
        newMatch.HomeTeamId = default;
        newMatch.AwayTeamId = default;
        newMatch.MatchDate = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day);
        newMatch.MatchTime = default;
        newMatch.FootballStadium = default;
    }

    private void BackToTheSeasonManagement()
    {
        Navigation.NavigateTo($"/league-master/leagues/{leagueInfoId}/{leagueSeasonId}");
    }
}