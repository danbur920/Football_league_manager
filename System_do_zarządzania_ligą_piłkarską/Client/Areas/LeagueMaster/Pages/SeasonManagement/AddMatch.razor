@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Areas.LeagueMaster.Shared
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs.Matches

@page "/league-master/leagues/{leagueInfoId:int}/{leagueSeasonId:int}/add-match"
@layout LeagueMasterLayout
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Dodawanie meczu</PageTitle>

<div class="button-container">
    <button class="btn btn-secondary" @onclick="BackToTheSeasonManagement">Wróć</button>
</div>

<h3>Dodaj mecz</h3>

@if (teams != null)
{
    <EditForm Model="newMatch" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="home" class="form-label">Gospodarz</label>
            <select id="home" class="form-select" @bind="newMatch.HomeTeamId">
                @foreach (var home in teams)
                {
                    <option value="@home.TeamId">@home.TeamName</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label for="away" class="form-label">Gość</label>
            <select id="away" class="form-select" @bind="newMatch.AwayTeamId">
                @foreach (var away in teams)
                {
                    <option value="@away.TeamId">@away.TeamName</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label for="round" class="form-label">Kolejka</label>
            <select id="round" class="form-select" @bind="newMatch.Round">
                @for(int i = 1; i<= 50; i++)
                {
                    <option value="@newMatch.Round">@i</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label for="matchDate" class="form-label">Data meczu</label>
            <InputDate id="matchDate" class="form-control" @bind-Value="newMatch.MatchDate" />
        </div>

        <div class="mb-3">
            <label for="matchTime" class="form-label">Godzina meczu</label>
            <InputDate Type="InputDateType.Time" id="matchTime" class="form-control" @bind-Value="newMatch.MatchTime" />
        </div>

        <button type="submit" class="btn btn-primary">Dodaj mecz</button>
    </EditForm>
}
else
{
    <p>Ładowanie...</p>
}



@code {
    [Parameter] public int leagueInfoId { get; set; }
    [Parameter] public int leagueSeasonId { get; set; }

    private LeagueSeasonDTO? season;
    private List<TeamStatDTO>? teams;

    private NewMatchDTO newMatch;

    protected override async Task OnInitializedAsync()
    {
        newMatch = new NewMatchDTO();
        season = await Http.GetFromJsonAsync<LeagueSeasonDTO>($"api/leagues/league-master/{leagueInfoId}/{leagueSeasonId}");
        teams = await Http.GetFromJsonAsync<List<TeamStatDTO>>($"api/leagues/{leagueInfoId}/table");
    }

    private async Task HandleValidSubmit()
    {
        // try
        // {
        //     newLeague.LeagueSeason.LeagueMasterId = await GetUserId();
        //     var response = await Http.PostAsJsonAsync("/api/leagues", newLeague);

        //     if (response.IsSuccessStatusCode)
        //     {
        //         AlertManager.DisplayAlert($"Dodano ligę {newLeague.LeagueInfo.Name}!", "success");
        //         Clear();
        //     }
        //     else
        //     {
        //         var content = await response.Content.ReadAsStringAsync();
        //         AlertManager.DisplayAlert($"Nie udało się dodać ligi {newLeague.LeagueInfo.Name}.", "danger");
        //     }
        // }
        // catch (Exception ex)
        // {
        //     AlertManager.DisplayAlert($"Nie udało się dodać ligi {newLeague.LeagueInfo.Name}.", "danger");
        // }
    }

    private void BackToTheSeasonManagement()
    {
        Navigation.NavigateTo($"/league-master/leagues/{leagueInfoId}/{leagueSeasonId}");
    }
}