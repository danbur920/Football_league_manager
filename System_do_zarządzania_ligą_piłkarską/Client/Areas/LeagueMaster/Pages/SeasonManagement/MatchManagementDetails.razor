@page "/league-master/leagues/{leagueInfoId:int}/{leagueSeasonId:int}/manage-matches/{matchId:int}"

@using System_do_zarządzania_ligą_piłkarską.Client.Areas.LeagueMaster.Shared
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs.Matches
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs.Referees
@using System_do_zarządzania_ligą_piłkarską.Shared.Enums
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using System_do_zarządzania_ligą_piłkarską.Client.Components
@using Microsoft.AspNetCore.Authorization

@layout LeagueMasterLayout
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AlertManager AlertManager
@attribute [Authorize(Roles = "LeagueMaster")]

<PageTitle>Zarządzaj meczem</PageTitle>

<h3>Zarządzaj meczem </h3>


<div class="d-flex justify-content-between mb-4">
    <button class="btn btn-secondary" @onclick="BackToTheMatchManagement">
        <i class="fas fa-arrow-left me-2"></i> Wróć
    </button>
    @if (editMatch != null && editMatch.IsFinished == false)
    {
        <button class="btn btn-success" @onclick="() => ConfirmMatch(matchId)">
            <i class="fas fa-check me-2"></i> Zatwierdź mecz
        </button>
    }
    else if (editMatch != null)
    {
        <button class="btn btn-warning" @onclick="()=> UncommitMatch(matchId)">
            <i class="fas fa-undo me-2"></i> Cofnij zatwierdzenie meczu
        </button>
    }
</div>

<Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />

@if (editMatch != null)
{
    <div class="match-info-container">
        <h5>Aktualny wynik:</h5>
        <div class="current-score">
            <span class="team-name">@editMatch.HomeTeam.Name</span>
            <span class="score">@($"{editMatch.GoalsHome}:{editMatch.GoalsAway}")</span>
            <span class="team-name">@editMatch.AwayTeam.Name</span>
        </div>
    </div>
}

@if(editMatch != null && editMatch.IsFinished == false)
{
    <div class="edit-forms-container">
        <div class="form-card">
            <h4>Edytuj mecz</h4>
            @if (editMatch != null)
            {
                <EditForm Model="editMatch" OnValidSubmit="ConfirmEditMatchInfo">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="home" class="form-label">Gospodarz</label>
                        <select id="home" class="form-select" @bind="editMatch.HomeTeamId">
                            <option value="">-- Zmień gospodarza --</option>
                            @foreach (var home in teams)
                            {
                                <option value="@home.TeamId">@home.TeamName</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="away" class="form-label">Gość</label>
                        <select id="away" class="form-select" @bind="editMatch.AwayTeamId">
                            <option value="">-- Zmień gościa --</option>
                            @foreach (var away in teams)
                            {
                                <option value="@away.TeamId">@away.TeamName</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="referee" class="form-label">Sędzia</label>
                        <select id="referee" class="form-select" @bind="editMatch.RefereeId">
                            <option value="">-- Zmień sędziego --</option>
                            @foreach (var referee in referees)
                            {
                                <option value="@referee.Id">@referee.FirstName @referee.LastName</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="round" class="form-label">Kolejka</label>
                        <select id="round" class="form-select" @bind="editMatch.Round">
                            <option value="">-- Zmień kolejkę --</option>
                            @for (int i = 1; i <= 50; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="matchDate" class="form-label">Data meczu</label>
                        <InputDate id="matchDate" class="form-control" @bind-Value="editMatch.MatchDate" />
                    </div>

                    <div class="mb-3">
                        <label for="matchTime" class="form-label">Godzina meczu</label>
                        <InputDate Type="InputDateType.Time" id="matchTime" class="form-control" @bind-Value="editMatch.MatchTime" />
                    </div>

                    <div class="mb-3">
                        <label for="stadium" class="form-label">Stadion</label>
                        <InputText id="stadium" class="form-control" @bind-Value="editMatch.FootballStadium" />
                    </div>

                    <button type="submit" class="btn btn-primary">Zatwierdź edycję meczu</button>
                </EditForm>
            }
        </div>

        <div class="form-card">
            <h4>Dodaj zdarzenie meczowe</h4>
            @if (newMatchEvent != null && teams != null && homeFootballers != null && awayFootballers != null)
            {
                <EditForm Model="newMatchEvent" OnValidSubmit="ConfirmNewMatchEvent">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="eventType" class="form-label">Typ zdarzenia</label>
                        <select id="eventType" class="form-select" @bind="newMatchEvent.EventType">
                            <option value="">-- Wybierz zdarzenie --</option>
                            @foreach (var eventType in EventTypeHelper.GetAllEventTypes())
                            {
                                <option value="@eventType">@EventTypeHelper.GetDisplayName(eventType)</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="minute" class="form-label">Minuta</label>
                        <select id="minute" class="form-select" @bind="newMatchEvent.Minute">
                            <option value="">-- Wybierz minutę zdarzenia --</option>
                            @for (int i = 1; i <= 120; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="team" class="form-label">Drużyna</label>
                        <select id="team" class="form-select" @bind="newMatchEvent.TeamId">
                            <option value="">-- Wybierz drużynę --</option>
                            @foreach (var team in teams)
                            {
                                <option value="@team.TeamId">@team.TeamName</option>
                            }
                        </select>
                    </div>



                    @if (newMatchEvent.TeamId != null && newMatchEvent.TeamId == homeFootballers.FirstOrDefault().TeamId)
                    {
                        <div class="mb-3">
                            <label for="primaryFootballer" class="form-label">Zawodnik główny gospodarz (zdobył gola, nietrafił rzutu karnego, otrzymał kartkę, wchodzi na boisko) - Wymagane</label>
                            <select id="primaryFootballer" class="form-select" @bind="newMatchEvent.PrimaryFootballerId">
                                <option value="">-- Wybierz zawodnika głównego --</option>
                                @foreach (var footballer in homeFootballers)
                                {
                                    <option value="@footballer.Id">@footballer.FirstName @footballer.LastName</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="primaryFootballer" class="form-label">Zawodnik drugorzędny gospodarz (zaliczył asystę, schodzi z boiska) - Opcjonalne</label>
                            <select id="primaryFootballer" class="form-select" @bind="newMatchEvent.SecondaryFootballerId">
                                <option value="">-- Wybierz zawodnika drugorzędnego --</option>
                                @foreach (var footballer in homeFootballers)
                                {
                                    <option value="@footballer.Id">@footballer.FirstName @footballer.LastName</option>
                                }
                            </select>
                        </div>
                    }
                    else if (newMatchEvent.TeamId != null)
                    {
                        <div class="mb-3">
                            <label for="primaryFootballer" class="form-label">Zawodnik główny gość (zdobył gola, nietrafił rzutu karnego, otrzymał kartkę, wchodzi na boisko) - Wymagane</label>
                            <select id="primaryFootballer" class="form-select" @bind="newMatchEvent.PrimaryFootballerId">
                                <option value="">-- Wybierz zawodnika głównego --</option>
                                @foreach (var footballer in awayFootballers)
                                {
                                    <option value="@footballer.Id">@footballer.FirstName @footballer.LastName</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label for="primaryFootballer" class="form-label">Zawodnik drugorzędny gość (zaliczył asystę, schodzi z boiska) - Opcjonalne</label>
                            <select id="primaryFootballer" class="form-select" @bind="newMatchEvent.SecondaryFootballerId">
                                <option value="">-- Wybierz zawodnika drugorzędnego --</option>
                                @foreach (var footballer in awayFootballers)
                                {
                                    <option value="@footballer.Id">@footballer.FirstName @footballer.LastName</option>
                                }
                            </select>
                        </div>
                    }

                    <div class="mb-3">
                        <label for="description" class="form-label">Opis</label>
                        <InputText id="description" class="form-control" @bind-Value="newMatchEvent.Description" />
                    </div>


                    <button type="submit" class="btn btn-primary">Dodaj zdarzenie</button>
                </EditForm>
            }
        </div>

        @if (newMatchFootballerHome != null && newMatchFootballerAway != null && awayFootballers != null && homeFootballers != null && homeLineup != null && awayLineup != null)
        {
            <div class="form-card">
                <h4>Skład gospodarza</h4>
                <EditForm Model="newMatchFootballerHome" OnValidSubmit="()=>ConfirmNewMatchFootballer(true)">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="homeFootballer" class="form-label">Zawodnik gospodarza</label>
                        <select id="homeFootballer" class="form-select" @bind="newMatchFootballerHome.FootballerId">
                            <option value="">-- Dodaj zawodnika --</option>
                            @foreach (var footballer in homeFootballers.Where(f => !homeLineup.Any(l => l.FootballerId == f.Id)))
                            {
                                <option value="@footballer.Id">@footballer.FirstName @footballer.LastName | @PositionHelper.GetDisplayName(footballer.Position)</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="isStarting" class="form-label">Wyjściowa 11</label>
                        <InputCheckbox id="isStarting" class="form-check-inline" @bind-Value="newMatchFootballerHome.IsStartingPlayer" />
                    </div>

                    <button type="submit" class="btn btn-primary">Dodaj zawodnika</button>
                </EditForm>

                <MatchLineup players="homeLineup" LoadLineupsCallback="LoadLineups" LineupForLeagueMaster="true"></MatchLineup>
            </div>

            <div class="form-card">
                <h4>Skład gości</h4>
                <EditForm Model="newMatchFootballerAway" OnValidSubmit="()=>ConfirmNewMatchFootballer(false)">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="awayFootballer" class="form-label">Zawodnik gościa</label>
                        <select id="awayFootballer" class="form-select" @bind="newMatchFootballerAway.FootballerId">
                            <option value="">-- Dodaj zawodnika --</option>
                            @foreach (var footballer in awayFootballers.Where(f => !awayLineup.Any(l => l.FootballerId == f.Id)))
                            {
                                <option value="@footballer.Id">@footballer.FirstName @footballer.LastName | @PositionHelper.GetDisplayName(footballer.Position)</option>
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="isStarting" class="form-label">Wyjściowa 11</label>
                        <InputCheckbox id="isStarting" class="form-check-inline" @bind-Value="newMatchFootballerAway.IsStartingPlayer" />
                    </div>

                    <button type="submit" class="btn btn-primary">Dodaj zawodnika</button>
                </EditForm>

                <MatchLineup players="awayLineup" LoadLineupsCallback="LoadLineups" LineupForLeagueMaster="true"></MatchLineup>
            </div>
        }

        <div class="form-card events-column">
            <h4>Zdarzenia meczowe</h4>
            @if (editMatch != null && editMatch.MatchEvents != null)
            {
                <div class="events-container">
                    <div class="team-events">
                        <h5>Gospodarz</h5>
                        @foreach (var eventt in homeMatchEvents)
                        {
                            <div class="event-item">
                                <span>@eventt.Minute'</span> -
                                @switch (eventt.EventType)
                                {
                                    case EventType.Goal:
                                        <i class="fas fa-futbol"></i>
                                        <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                        break;
                                    case EventType.YellowCard:
                                        <i class="fas fa-exclamation-triangle text-warning"></i>
                                        <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                        break;
                                    case EventType.RedCard:
                                        <i class="fas fa-ban text-danger"></i>
                                        <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                        break;
                                    case EventType.Substitution:
                                        <i class="fas fa-exchange-alt"></i>
                                        <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                        break;
                                    default:
                                        <span>@eventt.EventType</span>
                                        <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                        break;
                                }
                                <button @onclick="() => DeleteEvent(eventt.Id)" class="btn btn-primary">Usuń</button>
                            </div>
                        }
                    </div>

                    <div class="team-events">
                        <h5>Gość</h5>
                        @foreach (var eventt in awayMatchEvents)
                        {
                            <div class="event-item">
                                <span>@eventt.Minute'</span> -
                                @switch (eventt.EventType)
                                {
                                    case EventType.Goal:
                                        <i class="fas fa-futbol"></i>
                                        <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                        break;
                                    case EventType.OwnGoal:
                                        <i class="fas fa-futbol text-danger"></i>
                                        <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                        break;
                                    case EventType.Penalty:
                                        <i class="fas fa-futbol text-info"></i>
                                        <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                        break;
                                    case EventType.MissedPenalty:
                                        <i class="fas fa-futbol text-info"></i>
                                        <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                        break;
                                    case EventType.YellowCard:
                                        <i class="fas fa-exclamation-triangle text-warning"></i>
                                        <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                        break;
                                    case EventType.RedCard:
                                        <i class="fas fa-ban text-danger"></i>
                                        <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                        break;
                                    case EventType.Substitution:
                                        <i class="fas fa-exchange-alt"></i>
                                        <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                        break;
                                    default:
                                        <span>@eventt.EventType</span>
                                        <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                        break;
                                }
                                <button @onclick="() => DeleteEvent(eventt.Id)" class="btn btn-primary">Usuń</button>
                            </div>
                        }
                    </div>
                </div>

                <div class="legend">
                    <h5>Legenda:</h5>
                    <ul>
                        <li><i class="fas fa-futbol"></i> Gol</li>
                        <li><i class="fas fa-futbol text-info"></i> Gol (rzut karny)</li>
                        <li><i class="fas fa-futbol text-warning"></i> Rzut karny nietrafiony</li>
                        <li><i class="fas fa-futbol text-danger"></i> Gol samobójczy</li>
                        <li><i class="fas fa-exclamation-triangle text-warning"></i> Żółta kartka</li>
                        <li><i class="fas fa-ban text-danger"></i> Czerwona kartka</li>
                        <li><i class="fas fa-exchange-alt"></i> Zmiana</li>
                    </ul>
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="form-card events-column">
        <h4>Zdarzenia meczowe</h4>
        @if (editMatch != null && editMatch.MatchEvents != null)
        {
            <div class="events-container">
                <div class="team-events">
                    <h5>Gospodarz</h5>
                    @foreach (var eventt in homeMatchEvents)
                    {
                        <div class="event-item">
                            <span>@eventt.Minute'</span> -
                            @switch (eventt.EventType)
                            {
                                case EventType.Goal:
                                    <i class="fas fa-futbol"></i>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                                case EventType.OwnGoal:
                                    <i class="fas fa-futbol text-danger"></i>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                                case EventType.Penalty:
                                    <i class="fas fa-futbol text-info"></i>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                                case EventType.MissedPenalty:
                                    <i class="fas fa-futbol text-warning"></i>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                                case EventType.YellowCard:
                                    <i class="fas fa-exclamation-triangle text-warning"></i>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                                case EventType.RedCard:
                                    <i class="fas fa-ban text-danger"></i>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                                case EventType.Substitution:
                                    <i class="fas fa-exchange-alt"></i>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                                default:
                                    <span>@eventt.EventType</span>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                            }
                            <button @onclick="() => DeleteEvent(eventt.Id)" class="btn btn-primary">Usuń</button>
                        </div>
                    }
                </div>

                <div class="team-events">
                    <h5>Gość</h5>
                    @foreach (var eventt in awayMatchEvents)
                    {
                        <div class="event-item">
                            <span>@eventt.Minute'</span> -
                            @switch (eventt.EventType)
                            {
                                case EventType.Goal:
                                    <i class="fas fa-futbol"></i>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                                case EventType.OwnGoal:
                                    <i class="fas fa-futbol text-danger"></i>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                                case EventType.Penalty:
                                    <i class="fas fa-futbol text-info"></i>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                                case EventType.MissedPenalty:
                                    <i class="fas fa-futbol text-warning"></i>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                                case EventType.YellowCard:
                                    <i class="fas fa-exclamation-triangle text-warning"></i>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                                case EventType.RedCard:
                                    <i class="fas fa-ban text-danger"></i>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                                case EventType.Substitution:
                                    <i class="fas fa-exchange-alt"></i>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                                default:
                                    <span>@eventt.EventType</span>
                                    <span>@GetFootballersInfo(eventt.TeamId, eventt.PrimaryFootballerId, eventt.SecondaryFootballerId)</span>
                                    break;
                            }
                            <button @onclick="() => DeleteEvent(eventt.Id)" class="btn btn-primary">Usuń</button>
                        </div>
                    }
                </div>
            </div>

            <div class="legend">
                <h5>Legenda:</h5>
                <ul>
                    <li><i class="fas fa-futbol"></i> Gol</li>
                    <li><i class="fas fa-futbol text-info"></i> Gol (rzut karny)</li>
                    <li><i class="fas fa-futbol text-warning"></i> Rzut karny nietrafiony</li>
                    <li><i class="fas fa-futbol text-danger"></i> Gol samobójczy</li>
                    <li><i class="fas fa-exclamation-triangle text-warning"></i> Żółta kartka</li>
                    <li><i class="fas fa-ban text-danger"></i> Czerwona kartka</li>
                    <li><i class="fas fa-exchange-alt"></i> Zmiana</li>
                </ul>
            </div>
        }
    </div>
}



@code {
    [Parameter] public int leagueInfoId { get; set; }
    [Parameter] public int leagueSeasonId { get; set; }
    [Parameter] public int matchId { get; set; }

    private EditMatchDTO? editMatch;
    private MatchEventDTO? newMatchEvent;

    private List<TeamStatDTO>? teams;
    private List<ShortRefereeInfoDTO>? referees;

    private List<MatchEventDTO>? homeMatchEvents;
    private List<MatchEventDTO>? awayMatchEvents;

    private List<ShortFootballerInfoDTO>? homeFootballers;
    private List<ShortFootballerInfoDTO>? awayFootballers;

    private NewMatchFootballerDTO? newMatchFootballerHome;
    private NewMatchFootballerDTO? newMatchFootballerAway;

    private List<MatchFootballerDTO>? homeLineup;
    private List<MatchFootballerDTO>? awayLineup;


    protected override async Task OnInitializedAsync()
    {
        newMatchEvent = new MatchEventDTO();

        await LoadMatch();
        await GetTeams();

        referees = await Http.GetFromJsonAsync<List<ShortRefereeInfoDTO>>($"api/referees/league-master/specific-season/{leagueSeasonId}");

        if (editMatch != null)
        {
            homeFootballers = await Http.GetFromJsonAsync<List<ShortFootballerInfoDTO>>($"api/footballers/team/{editMatch.HomeTeamId}");// potencjalnie do rozbudowy bo bierze wszystkich piłkarz z drużyny
            awayFootballers = await Http.GetFromJsonAsync<List<ShortFootballerInfoDTO>>($"api/footballers/team/{editMatch.AwayTeamId}");

            await LoadMatchEvents();
        }

        await LoadLineups();
        ResetPlayer();
    }

    private async Task LoadMatch()
    {
        editMatch = await Http.GetFromJsonAsync<EditMatchDTO>($"api/matches/league-master/match/{leagueSeasonId}/{matchId}");
    }

    private async Task LoadLineups()
    {
        homeLineup = await Http.GetFromJsonAsync<List<MatchFootballerDTO>>($"api/matches/lineup/{matchId}/{editMatch.HomeTeamId}");
        awayLineup = await Http.GetFromJsonAsync<List<MatchFootballerDTO>>($"api/matches/lineup/{matchId}/{editMatch.AwayTeamId}");

        StateHasChanged();
    }

    private async Task LoadMatchEvents()
    {
        homeMatchEvents = editMatch.MatchEvents.Where(x => x.TeamId == editMatch.HomeTeamId).ToList();
        awayMatchEvents = editMatch.MatchEvents.Where(x => x.TeamId == editMatch.AwayTeamId).ToList();
    }

    private void ResetPlayer()
    {
        newMatchFootballerHome = new NewMatchFootballerDTO();
        newMatchFootballerAway = new NewMatchFootballerDTO();
    }

    private async Task GetTeams()
    {
        teams = await Http.GetFromJsonAsync<List<TeamStatDTO>>($"api/leagues/{leagueSeasonId}/table");
        teams = teams.Where(x => x.TeamId == editMatch.HomeTeamId || x.TeamId == editMatch.AwayTeamId).ToList();        
    }

    private async Task ConfirmEditMatchInfo()
    {
        try
        {
            var response = await Http.PatchAsJsonAsync("api/matches/league-master", editMatch);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Zaktualizowano mecz {editMatch.HomeTeam.Name}-{editMatch.AwayTeam.Name}!", "success");
                await LoadMatch();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się zaktualizować meczu {editMatch.HomeTeam.Name}-{editMatch.AwayTeam.Name}.", "danger");
            }
        }
        catch (Exception ex)
        {
            AlertManager.DisplayAlert($"Nie udało się zaktualizować meczu {editMatch.HomeTeam.Name}-{editMatch.AwayTeam.Name}.", "danger");
        }
    }

    private async Task ConfirmNewMatchEvent()
    {
        try
        {
            newMatchEvent.LeagueSeasonId = leagueSeasonId;
            newMatchEvent.MatchId = matchId;
            newMatchEvent.RefereeId = editMatch.RefereeId;

            var response = await Http.PostAsJsonAsync("api/matches/league-master/match-event", newMatchEvent);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Dodano zdarzenie meczowe!", "success");

                await LoadMatch();
                await LoadMatchEvents();
                newMatchEvent = new MatchEventDTO();

                StateHasChanged();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się dodać zdarzenia meczowego.", "danger");
            }
        }
        catch (Exception ex)
        {
            AlertManager.DisplayAlert($"Nie udało się dodać zdarzenia meczowego.", "danger");
        }
    }

    public async Task ConfirmNewMatchFootballer(bool refersToHome)
    {
        try
        {
            HttpResponseMessage response = default;
            if (refersToHome)
            {
                newMatchFootballerHome.MatchId = matchId;
                newMatchFootballerHome.TeamId = editMatch.HomeTeamId;
                response = await Http.PostAsJsonAsync("api/matches/league-master/match-footballer", newMatchFootballerHome);
            }
            else
            {
                newMatchFootballerAway.MatchId = matchId;
                newMatchFootballerAway.TeamId = editMatch.AwayTeamId;
                response = await Http.PostAsJsonAsync("api/matches/league-master/match-footballer", newMatchFootballerAway);
            }

            if (response.IsSuccessStatusCode)
            {
                AlertManager.IsVisible = true;
                AlertManager.DisplayAlert($"Dodano piłkarza do składu meczowego!", "success");
                await LoadLineups();
                StateHasChanged();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się dodać piłkarza do składu meczowego.", "danger");
            }
        }
        catch (Exception ex)
        {
            AlertManager.DisplayAlert($"Nie udało się dodać piłkarza do składu meczowego.", "danger");
        }
    }

    public async Task DeleteEvent(int matchEventId)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/matches/league-master/match-event/{matchEventId}");

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Usunięto zdarzenie meczowe!", "success");

                await LoadMatch();
                await LoadMatchEvents();
                StateHasChanged();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się usunąć zdarzenia meczowego.", "danger");
            }
        }
        catch (Exception ex)
        {
            AlertManager.DisplayAlert($"Nie udało się usunąć zdarzenia meczowego.", "danger");
        }
    }

    public async Task ConfirmMatch(int matchId)
    {
        try
        {
            var response = await Http.PatchAsync($"api/matches/league-master/change-match-state/{matchId}", null);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Zatwierdzono mecz!", "success");
                StateHasChanged();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się zatwierdzić meczu.", "danger");
            }
        }
        catch (Exception ex)
        {
            AlertManager.DisplayAlert($"Nie udało się zatwierdzić meczu.", "danger");
        }
    }

    public async Task UncommitMatch(int matchId)
    {
        try
        {
            var response = await Http.PatchAsync($"api/matches/league-master/change-match-state/{matchId}", null);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Anulowano zatwierdzenie meczu!", "success");

                await LoadMatch();
                await LoadMatchEvents();
                newMatchEvent = new MatchEventDTO();

                StateHasChanged();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się anulować zatwierdzenia meczu.", "danger");
            }
        }
        catch (Exception ex)
        {
            AlertManager.DisplayAlert($"Nie udało się anulować zatwierdzenia meczu.", "danger");
        }
    }

    private string GetFootballersInfo(int? teamId, int? primaryFootballerId, int? secondaryFootballerId)
    {
        if (teamId == homeFootballers.FirstOrDefault().TeamId)
        {
            var primaryFootballer = homeFootballers.FirstOrDefault(x => x.Id == primaryFootballerId);
            var secondaryFootballer = homeFootballers.FirstOrDefault(x => x.Id == secondaryFootballerId);
            if (secondaryFootballer != null)
            {
                return $"{primaryFootballer?.FirstName.FirstOrDefault()}. {primaryFootballer?.LastName} ({secondaryFootballer?.FirstName.FirstOrDefault()}. {secondaryFootballer?.LastName})";
            }

            return $"{primaryFootballer?.FirstName.FirstOrDefault()}. {primaryFootballer?.LastName}";
        }

        var primaryFootballerAway = awayFootballers.FirstOrDefault(x => x.Id == primaryFootballerId);
        var secondaryFootballerAway = awayFootballers.FirstOrDefault(x => x.Id == secondaryFootballerId);
        if (secondaryFootballerAway != null)
        {
            return $"{primaryFootballerAway?.FirstName.FirstOrDefault()}. {primaryFootballerAway?.LastName} ({secondaryFootballerAway?.FirstName.FirstOrDefault()}. {secondaryFootballerAway?.LastName})";
        }

        return $"{primaryFootballerAway?.FirstName.FirstOrDefault()}. {primaryFootballerAway?.LastName}";
    }

    private void BackToTheMatchManagement()
    {
        Navigation.NavigateTo($"/league-master/leagues/{leagueInfoId}/{leagueSeasonId}/manage-matches");
    }
}


<style>
    .match-info-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 20px;
    }

    .team-name {
        margin: 0 10px;
    }

    .score {
        font-weight: bold;
        font-size: 1.5rem;
        margin: 0 10px;
    }

    .current-score {
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 1.4rem;
        font-weight: bold;
        margin-top: 10px;
    }

    .edit-forms-container {
        display: flex;
        gap: 20px;
    }

    .form-card {
        flex: 1;
        background-color: #dcdcdc;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }

    .events-column {
        flex: 1.5;
    }

    .events-container {
        display: flex;
        justify-content: space-between;
    }

    .team-events {
        flex: 1;
        margin: 10px;
    }

    .event-item {
        background-color: #e9ecef;
        border-radius: 5px;
        padding: 5px;
        margin-bottom: 5px;
        font-size: 0.9rem;
    }

    .legend {
        margin-top: 15px;
        background-color: #f4f4f4;
        padding: 10px;
        border-radius: 5px;
    }
</style>