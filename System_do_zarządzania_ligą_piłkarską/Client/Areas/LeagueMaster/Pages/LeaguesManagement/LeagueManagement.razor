@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Areas.LeagueMaster.Shared
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using System_do_zarządzania_ligą_piłkarską.Client.Components

@page "/league-master/leagues/{leagueInfoId:int}"
@layout LeagueMasterLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AlertManager AlertManager

<PageTitle>Sezony</PageTitle>

<div class="button-container">
    <button class="btn btn-secondary" @onclick="GoBackToTheLeagues">Wróć</button>
</div>


@if(seasons == null)
{
    <span>Ładowanie...</span>
}
else
{
    <h3>Sezony ligi @leagueName:</h3>

    <Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Sezon</th>
                <th>Rozpoczęcie sezonu</th>
                <th>Zakończenie sezonu</th>
                <th>Rozegrane mecze</th>
                <th>Zarządzaj</th>
            </tr>
        </thead>
        <tbody>
            @if (seasons == null)
            {
                <tr>
                    <td colspan="8">Ładowanie...</td>
                </tr>
            }
            else if (seasons.Count == 0)
            {
                <tr>
                    <td colspan="8">Brak danych do wyświetlenia</td>
                </tr>
            }
            else
            {
                @foreach (var season in seasons)
                {
                    <tr>
                        <td>@season.Season</td>
                        <td>@season.LeagueStartDate</td>
                        <td>@season.LeagueEndDate</td>
                        <td>@season.MatchesPlayed</td>
                        <td>
                            <button class="btn btn-link" @onclick="() => GoToTheSeason(season.Id)">
                                <i class="fas fa-arrow-right"></i> Przejdź do sezonu
                            </button>
                             @if (IsPrimaryLeagueMaster(season.LeagueInfo.LeagueMasterPrimaryId) && IsSecondaryLeagueMaster(season.LeagueMasterSecondaryId))
                            {
                                // jeśli jest pierwszorzędnym i drugorzędnym to można przypisać drugorzędnego


                                <InputText @bind-Value="userEmailToAssign" Placeholder="Wpisz e-mail zarządcy sezonu" />
                                <button class="btn btn-primary" @onclick="() => AssignUserToManagement(season.Id, userEmailToAssign)">
                                    Zatwierdź zarządce
                                </button>
                            }
                            else if (IsPrimaryLeagueMaster(season.LeagueInfo.LeagueMasterPrimaryId) && !IsSecondaryLeagueMaster(season.LeagueMasterSecondaryId))
                            {
                                <span>@season.LeagueMasterSecondary.FirstName @season.LeagueMasterSecondary.LastName</span>
                                <button class="btn btn-danger" @onclick="() => DeleteUserFromManagement(season.Id, season.LeagueInfo.LeagueMasterPrimaryId)">
                                    Usuń zarządce
                                </button>
                            }
                            else if (!IsPrimaryLeagueMaster(season.LeagueInfo.LeagueMasterPrimaryId) && IsSecondaryLeagueMaster(season.LeagueMasterSecondaryId))
                            {
                                <span>Jesteś drugorzędnym zarządcą</span>
                                // jeśli jest drugorzędnym ale nie pierwszorzędnym to może zrezygnować z prowadzenia sezonu i przypisać pierwszorzędnego
                            } 
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@* <button class="btn btn-danger" @onclick="()=>ShowRemoveModal(league.LeagueInfoId)">Usuń ligę</button> *@
@* <button class="btn btn-danger" @onclick="()=>ShowRemoveModal(league.LeagueInfoId)">Usuń ligę</button> *@

@code {
    [Parameter] public int leagueInfoId { get; set; }
    public string? leagueName { get; set; }
    private string? userEmailToAssign = string.Empty;

    private List<LeagueSeasonDTO>? seasons;

    protected override async Task OnInitializedAsync()
    {
        await LoadSeasons();
        AssignLeagueName();
    }

    private async Task LoadSeasons()
    {
        seasons = await Http.GetFromJsonAsync<List<LeagueSeasonDTO>>($"api/leagues/league-master/{leagueInfoId}");
    }

    private void AssignLeagueName()
    {
        var league = seasons?.FirstOrDefault();
        leagueName = league?.LeagueInfo.Name;
    }

    private void GoToTheSeason(int leagueSeasonId)
    {
        Navigation.NavigateTo($"/league-master/leagues/{leagueInfoId}/{leagueSeasonId}");
    }

    private void GoBackToTheLeagues()
    {
        Navigation.NavigateTo($"/league-master/leagues");
    }

    private async Task<string> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private bool IsPrimaryLeagueMaster(string leagueMasterPrimaryId)
    {
        var userId = GetUserId().Result;
        return leagueMasterPrimaryId == userId;
    }

    private bool IsSecondaryLeagueMaster(string leagueMasterSecondaryId)
    {
        var userId = GetUserId().Result;
        return leagueMasterSecondaryId == userId;
    }

    private async Task AssignUserToManagement(int leagueSeasonId, string leagueMasterSecondaryEmail)
    {
        var response = await Http.PatchAsJsonAsync($"api/leagues/league-master/{leagueSeasonId}/assign-secondary-league-master", leagueMasterSecondaryEmail);

        if (response.IsSuccessStatusCode)
        {
            AlertManager.DisplayAlert($"Przypisano zarządce do wybranego sezonu!", "success");
            await LoadSeasons();
        }
        else
        {
            AlertManager.DisplayAlert($"Nie udało się przypisać zarządcy do wybranego sezonu.", "danger");
        }
        userEmailToAssign = string.Empty;
    }

    private async Task DeleteUserFromManagement(int leagueSeasonId, string leagueMasterPrimaryId)
    {
        var response = await Http.PatchAsJsonAsync($"api/leagues/league-master/{leagueSeasonId}/remove-secondary-league-master", leagueMasterPrimaryId);

        if (response.IsSuccessStatusCode)
        {
            AlertManager.DisplayAlert($"Usunięto zarządce z wybranego sezonu!", "success");
            await LoadSeasons();
        }
        else
        {
            AlertManager.DisplayAlert($"Nie udało się usunąć zarządcy z wybranego sezonu.", "danger");
        }
    }
}