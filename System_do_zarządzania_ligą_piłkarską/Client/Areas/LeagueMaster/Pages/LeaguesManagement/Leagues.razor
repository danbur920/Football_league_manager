@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Areas.LeagueMaster.Shared
@using System_do_zarządzania_ligą_piłkarską.Client.Components
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using Microsoft.AspNetCore.Authorization

@page "/league-master/leagues"
@layout LeagueMasterLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AlertManager AlertManager
@attribute [Authorize(Roles = "LeagueMaster")]

<PageTitle>Twoje ligi</PageTitle>

@if (showModal)
{
    <Modal Title="Usuń" Body="Czy na pewno chcesz usunąć wybraną ligę? Zmiany są nieodwracalne!" OnConfirm="HandleConfirm" OnCancel="HandleCancel" />
}

<div class="container py-5">
    <div class="row mb-4">
        <div class="col text-center">
            <h3 class="display-5 fw-bold text-primary">Twoje ligi</h3>
        </div>
    </div>

    <Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />

    @if (leagues != null)
    {
        <table class="table table-hover table-bordered shadow-sm">
            <thead class="table-primary">
                <tr>
                    <th class="text-center">Nazwa</th>
                    <th class="text-center">Kraj</th>
                    <th class="text-center">Poziom ligi</th>
                    <th class="text-center">Przejdź do ligi</th>
                    <th class="text-center">Działania</th>
                </tr>
            </thead>
            <tbody>
                @if (leagues.Count == 0)
                {
                    <tr>
                        <td colspan="5" class="text-center">Brak danych do wyświetlenia</td>
                    </tr>
                }
                else
                {
                    @foreach (var league in leagues)
                    {
                        <tr>
                            <td class="align-middle text-center">@league.Name</td>
                            <td class="align-middle text-center">@league.Country</td>
                            <td class="align-middle text-center">@league.Level</td>
                            <td class="align-middle text-center">
                                <button class="btn btn-link text-primary" @onclick="() => GoToTheLeague(league.Id)">
                                    <i class="fas fa-arrow-right"></i> Zarządzaj ligą
                                </button>
                            </td>
                            <td class="align-middle text-center">
                                @if (IsPrimaryLeagueMaster(league.LeagueMasterPrimaryId))
                                {
                                    <button class="btn btn-danger" @onclick="()=>ShowRemoveModal(league.Id)">
                                        <i class="fas fa-trash-alt"></i> Usuń ligę
                                    </button>
                                }
                                else
                                {
                                    <i class="fas fa-lock text-muted" title="Brak uprawnień do usunięcia"></i>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="text-center">
            <span class="spinner-border text-primary" role="status"></span>
            <span class="visually-hidden">Ładowanie...</span>
        </div>
    }
</div>




@code {
    private List<LeagueInfoDTO>? leagues;
    private bool showModal = false;
    private int leagueIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadLeagues();
    }

    private void GoToTheLeague(int leagueId)
    {
        Navigation.NavigateTo($"/league-master/leagues/{leagueId}");
    }

    private async Task LoadLeagues()
    {
        leagues = await Http.GetFromJsonAsync<List<LeagueInfoDTO>>("api/leagues/league-master");
    }

    private bool IsPrimaryLeagueMaster(string leagueMasterPrimaryId)
    {
        var userId = GetUserId().Result;
        return leagueMasterPrimaryId == userId;
    }

    private bool IsSecondaryLeagueMaster(string leagueMasterSecondaryId)
    {
        var userId = GetUserId().Result;
        return leagueMasterSecondaryId == userId;
    }

    private async Task<string> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private async Task DeleteLeague(int leagueId)
    {
        var result = await Http.DeleteAsync($"api/leagues/league-master/{leagueId}");
        if (result.IsSuccessStatusCode)
        {
            await LoadLeagues();
        }
    }

    private void ShowRemoveModal(int leagueId)
    {
        leagueIdToDelete = leagueId;
        showModal = true;
    }

    private async Task HandleConfirm()
    {
        await DeleteLeague(leagueIdToDelete);
        showModal = false;
    }

    private async Task HandleCancel()
    {
        showModal = false;
    }
}