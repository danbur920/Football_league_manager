@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Areas.LeagueMaster.Shared
@using System_do_zarządzania_ligą_piłkarską.Client.Components
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions

@page "/league-master/leagues"
@layout LeagueMasterLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AlertManager AlertManager

<PageTitle>Twoje ligi</PageTitle>

@if (showModal)
{
    <Modal Title="Usuń" Body="Czy na pewno chcesz usunąć wybraną ligę? Zmiany są nieodwracalne!" OnConfirm="HandleConfirm" OnCancel="HandleCancel" />
}

<h3>Twoje ligi</h3>

<Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />

@if (leagues != null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nazwa</th>
                <th>Kraj</th>
                <th>Poziom ligi</th>
                <th>Przejdź do ligi</th>
                <th>Działania</th>
            </tr>
        </thead>
        <tbody>
            @if (leagues.Count == 0)
            {
                <tr>
                    <td colspan="8">Brak danych do wyświetlenia</td>
                </tr>
            }
            else
            {
                @foreach (var league in leagues)
                {
                    <tr>
                        <td>@league.LeagueInfo.Name</td>
                        <td>@league.LeagueInfo.Country</td>
                        <td>@league.LeagueInfo.Level</td>
                        <td>
                            <button class="btn btn-link" @onclick="() => GoToTheLeague(league.LeagueInfoId)">
                                <i class="fas fa-arrow-right"></i> Zarządzaj ligą
                            </button>
                        </td>
                        <td>
                            @if (IsPrimaryLeagueMaster(league.LeagueInfo.LeagueMasterPrimaryId) && IsSecondaryLeagueMaster(league.LeagueMasterSecondaryId))
                            {
                                // jeśli jest pierwszorzędnym i drugorzędnym to można przypisać drugorzędnego
                                <button class="btn btn-danger" @onclick="()=>ShowRemoveModal(league.LeagueInfoId)">Usuń ligę</button>

                                <InputText @bind-Value="userEmailToAssign" Placeholder="Wpisz e-mail zarządcy sezonu" />
                                <button class="btn btn-primary" @onclick="() => AssignUserToManagement(league.Id, userEmailToAssign)">
                                    Zatwierdź zarządce
                                </button>
                            }
                            else if (IsPrimaryLeagueMaster(league.LeagueInfo.LeagueMasterPrimaryId) && !IsSecondaryLeagueMaster(league.LeagueMasterSecondaryId))
                            {
                                <button class="btn btn-danger" @onclick="()=>ShowRemoveModal(league.LeagueInfoId)">Usuń ligę</button>

                                <span>@league.LeagueMasterSecondary.FirstName @league.LeagueMasterSecondary.LastName</span>
                                <button class="btn btn-danger" @onclick="() => DeleteUserFromManagement(league.Id, league.LeagueInfo.LeagueMasterPrimaryId)">
                                    Usuń zarządce
                                </button> 
                            }
                            else if (!IsPrimaryLeagueMaster(league.LeagueInfo.LeagueMasterPrimaryId) && IsSecondaryLeagueMaster(league.LeagueMasterSecondaryId))
                            {
                                <span>Hej, jestem drugorzędnym zarządcą!</span>
                                // jeśli jest drugorzędnym ale nie pierwszorzędnym to może zrezygnować z prowadzenia sezonu i przypisać pierwszorzędnego
                            } 
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}



@code {
    private List<LeagueSeasonDTO>? leagues;
    private string userEmailToAssign = string.Empty;
    private bool showModal = false;
    private int leagueIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadLeagues();
    }

    private void GoToTheLeague(int leagueId)
    {
        Navigation.NavigateTo($"/league-master/leagues/{leagueId}");
    }

    private async Task LoadLeagues()
    {
        leagues = await Http.GetFromJsonAsync<List<LeagueSeasonDTO>>("api/leagues/league-master");
    }

    private bool IsPrimaryLeagueMaster(string leagueMasterPrimaryId)
    {
        var userId = GetUserId().Result;
        return leagueMasterPrimaryId == userId;
    }

    private bool IsSecondaryLeagueMaster(string leagueMasterSecondaryId)
    {
        var userId = GetUserId().Result;
        return leagueMasterSecondaryId == userId;
    }

    private async Task<string> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private async Task DeleteLeague(int leagueId)
    {
        var result = await Http.DeleteAsync($"api/leagues/league-master/{leagueId}");
        if (result.IsSuccessStatusCode)
        {
            await LoadLeagues();
        }
    }

    private void ShowRemoveModal(int leagueId)
    {
        leagueIdToDelete = leagueId;
        showModal = true;
    }

    private async Task HandleConfirm()
    {
        await DeleteLeague(leagueIdToDelete);
        showModal = false;
    }

    private async Task HandleCancel()
    {
        showModal = false;
    }

    private async Task AssignUserToManagement(int leagueSeasonId, string leagueMasterSecondaryEmail)
    {
        var response = await Http.PatchAsJsonAsync($"api/leagues/league-master/{leagueSeasonId}/assign-secondary-league-master", leagueMasterSecondaryEmail);

        if (response.IsSuccessStatusCode)
        {
            AlertManager.DisplayAlert($"Przypisano zarządce do wybranego sezonu!", "success");
            await LoadLeagues();
        }
        else
        {
            AlertManager.DisplayAlert($"Nie udało się przypisać zarządcy do wybranego sezonu.", "danger");
        }
        userEmailToAssign = string.Empty;
    }

    private async Task DeleteUserFromManagement(int leagueSeasonId, string leagueMasterPrimaryId)
    {
        var response = await Http.PatchAsJsonAsync($"api/leagues/league-master/{leagueSeasonId}/remove-secondary-league-master", leagueMasterPrimaryId);

        if (response.IsSuccessStatusCode)
        {
            AlertManager.DisplayAlert($"Usunięto zarządce z wybranego sezonu!", "success");
            await LoadLeagues();
        }
        else
        {
            AlertManager.DisplayAlert($"Nie udało się usunąć zarządcy z wybranego sezonu.", "danger");
        }
    }

}