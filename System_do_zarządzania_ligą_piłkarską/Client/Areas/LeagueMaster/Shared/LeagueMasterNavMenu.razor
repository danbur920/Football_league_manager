@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">System_do_zarządzania_ligą_piłkarską</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/league-master/start" Match="NavLinkMatch.All">
                <i class="fas fa-home px-2"></i> Start
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/league-master/leagues">
                <i class="fas fa-trophy px-2"></i> Twoje ligi
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/league-master/add-new-team">
                <i class="fas fa-users px-2"></i> Stwórz drużynę
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/league-master/created-teams">
                <i class="fas fa-layer-group px-2"></i> Stworzone drużyny
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string userId;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirst(c => c.Type == "sub")?.Value;
        StateHasChanged();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        var user = authState.User;
        userId = user.FindFirst(c => c.Type == "sub")?.Value;
        StateHasChanged();
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
