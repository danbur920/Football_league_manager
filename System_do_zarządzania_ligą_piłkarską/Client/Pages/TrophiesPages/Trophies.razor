@page "/trophies"
@attribute [AllowAnonymous]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System_do_zarządzania_ligą_piłkarską.Shared
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using System_do_zarządzania_ligą_piłkarską.Client.Components

@inject PublicClient PublicClient
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SearchQueryManager SearchQueryManager
@inject AlertManager AlertManager
@inject PaginationManager PaginationManager

<PageTitle>Trofea</PageTitle>

<div class="container py-5">
    <div class="text-center mb-5">
        <h1 class="display-4 fw-bold text-primary">Trofea</h1>
    </div>

    <div class="alert-placeholder mb-4">
        <Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />
    </div>

    <div class="card border-0 shadow-sm mb-5">
        <div class="card-body">
            <h5 class="card-title text-secondary fw-bold mb-4">Wyszukaj trofeum</h5>
            <div class="row g-4">
                <div class="col-lg-6">
                    <input type="text" @bind="searchQueryName" class="form-control form-control-lg" placeholder="🔍 Szukaj trofeum po nazwie..." />
                </div>
                <div class="col-lg-6">
                    <input type="text" @bind="searchQueryType" class="form-control form-control-lg" placeholder="🏆 Szukaj po typie (Indywidualne/Drużynowe)..." />
                </div>
            </div>
        </div>
    </div>

    @if (filteredTrophies == null)
    {
        <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Ładowanie...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <h5 class="card-title text-secondary fw-bold mb-4">Lista Trofeów</h5>
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead class="table-primary text-center">
                            <tr>
                                <th>Nazwa</th>
                                <th>Typ</th>
                                <th>Posiadacz</th>
                                <th>Rok wygrania</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (filteredTrophies.Count() == 0)
                            {
                                <tr>
                                    <td colspan="4" class="text-center text-muted">
                                        Brak trofeów lub żadne trofeum nie spełnia określonych kryteriów wyszukiwania.
                                    </td>
                                </tr>
                            }
                            @foreach (var trophy in filteredTrophies)
                            {
                                <tr class="text-center">
                                    <td>@trophy.TrophyName</td>
                                    <td>@ShowTrophyType(trophy)</td>
                                    <td>@ShowOwner(trophy)</td>
                                    <td>@trophy.YearWon</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<TrophyDTO>? trophies;
    private string searchQueryName = string.Empty;
    private string searchQueryType = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            trophies = await PublicClient.Client.GetFromJsonAsync<List<TrophyDTO>>("api/trophies");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private string ShowOwner(TrophyDTO trophy)
    {
        return trophy.TrophyOwner == 0
            ? $"{trophy.Footballer.FirstName} {trophy.Footballer.LastName}"
            : $"{trophy.Team.Name}";
    }

    private string ShowTrophyType(TrophyDTO trophy)
    {
        return trophy.TrophyOwner == 0 ? "Indywidualne" : "Drużynowe";
    }

    private IEnumerable<TrophyDTO>? filteredTrophies =>
        trophies?.Where(trophy =>
            (string.IsNullOrWhiteSpace(searchQueryName) || trophy.TrophyName.Contains(searchQueryName, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrWhiteSpace(searchQueryType) || ShowTrophyType(trophy).Contains(searchQueryType, StringComparison.OrdinalIgnoreCase))
        );
}
