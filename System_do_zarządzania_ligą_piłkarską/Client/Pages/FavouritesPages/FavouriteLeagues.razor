@page "/favourites/leagues"
@attribute [Authorize]
@using System.Net.Http
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using System_do_zarządzania_ligą_piłkarską.Client.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AlertManager AlertManager

<PageTitle>Ulubione ligi</PageTitle>

<div class="container py-5">
    <div class="text-center mb-5">
        <h1 class="display-4 fw-bold text-primary">Ulubione Ligi</h1>
    </div>

    @if (_showModal)
    {
        <Modal Title="Usuń" Body="Czy na pewno chcesz usunąć wybraną ligę z ulubionych?" OnConfirm="HandleConfirm" OnCancel="HandleCancel" />
    }

    <div class="alert-placeholder mb-4">
        <Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />
    </div>

    @if (favouriteLeagues == null)
    {
        <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Ładowanie...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <h5 class="card-title text-secondary fw-bold mb-4">Lista Ulubionych Lig</h5>
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead class="table-primary text-center">
                            <tr>
                                <th>Nazwa</th>
                                <th>Kraj</th>
                                <th>Poziom</th>
                                <th>Sezon</th>
                                <th>Rozegrane mecze</th>
                                <th>Start ligi</th>
                                <th>Koniec ligi</th>
                                <th>Usuń</th>
                                <th>Szczegóły</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (favouriteLeagues.Count() == 0)
                            {
                                <tr>
                                    <td colspan="9" class="text-center text-muted">
                                        Brak ulubionych lig.
                                    </td>
                                </tr>
                            }
                            @foreach (var league in favouriteLeagues)
                            {
                                <tr class="text-center">
                                    <td>@league.LeagueInfo.Name</td>
                                    <td>@league.LeagueInfo.Country</td>
                                    <td>@league.LeagueInfo.Level</td>
                                    <td>@league.Season</td>
                                    <td>@league.MatchesPlayed</td>
                                    <td>@league.LeagueStartDate</td>
                                    <td>@league.LeagueEndDate</td>
                                    <td>
                                        <button class="btn btn-danger btn-sm" @onclick="() => ShowRemoveModal(league.Id)">
                                            <i class="fas fa-trash"></i> Usuń
                                        </button>
                                    </td>
                                    <td>
                                        <button class="btn btn-success btn-sm" @onclick="() => NavigateToLeagueDetails(league.Id)">
                                            <i class="fas fa-info-circle"></i> Szczegóły
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<LeagueSeasonDTO>? favouriteLeagues;

    private string _userId = string.Empty;
    private bool _showModal = false;
    private int _leagueIdToRemove;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _userId = await GetUserId();
            await RefreshFavourites();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RefreshFavourites()
    {
        favouriteLeagues = await Http.GetFromJsonAsync<List<LeagueSeasonDTO>>("api/favourites/favourite-leagues");
    }

    private void ShowRemoveModal(int leagueId)
    {
        _leagueIdToRemove = leagueId;
        _showModal = true;
    }

    private async Task HandleConfirm(bool confirmed)
    {
        if (confirmed)
        {
            await RemoveFromFavourites(_leagueIdToRemove);
        }
        _showModal = false;
    }

    private async Task HandleCancel()
    {
        _showModal = false;
    }

    private async Task<string?> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private async Task RemoveFromFavourites(int leagueId)
    {
        _userId = await GetUserId();

        if (_userId != null)
        {
            var response = await Http.DeleteAsync($"api/favourites/league/{leagueId}/{_userId}");
            var league = favouriteLeagues.FirstOrDefault(l => l.Id == leagueId);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Usunięto ligę {league?.LeagueInfo.Name} z ulubionych.", "info");
                await RefreshFavourites();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się usunąć ligi {league?.LeagueInfo.Name} z ulubionych.", "danger");
            }
        }
    }

    private void NavigateToLeagueDetails(int leagueId)
    {
        Navigation.NavigateTo($"/leagues/{leagueId}");
    }
}


