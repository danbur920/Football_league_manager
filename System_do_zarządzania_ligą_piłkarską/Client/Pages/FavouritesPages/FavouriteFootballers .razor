@page "/favourites/footballers"
@using System.Net.Http
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using System_do_zarządzania_ligą_piłkarską.Client.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Ulubieni piłkarze</PageTitle>

@if (_showModal)
{
    <Modal Title="Usuń" Body="Czy na pewno chcesz usunąć wybranego piłkarza z ulubionch?" OnConfirm="HandleConfirm" OnCancel="HandleCancel" />
}

@if (alertManager.AlertVisibility)
{
    <div class="alert @($"alert-{alertManager.AlertType}") alert-dismissible fade show" role="alert">
        @alertManager.AlertMessage
        <button type="button" class="btn-close" aria-label="Close" @onclick="() => alertManager.AlertVisibility = false"></button>
    </div>
}

@if (favouriteFootballers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Imię</th>
                <th>Nazwisko</th>
                <th>Ksywa</th>
                <th>Narodowość</th>
                <th>Pozycja</th>
                <th>Klub</th>
                <th>Usuń z ulubionych</th>
                <th>Profil piłkarza</th>
            </tr>
        </thead>
        <tbody>
            @if (favouriteFootballers.Count() == 0)
            {
                <tr>
                    <td colspan="9" style="text-align: center">Brak ulubionych piłkarzy</td>
                </tr>
            }
            @foreach (var footballer in favouriteFootballers)
            {
                <tr>
                    <td>@footballer.FirstName</td>
                    <td>@footballer.LastName</td>
                    <td>@footballer.NickName</td>
                    <td>@footballer.Nationality</td>
                    <td>@footballer.Position</td>
                    <td>@footballer.Team.Name</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => ShowRemoveModal(footballer.Id)">
                            <i class="fas fa-trash"></i> Usuń
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-link" @onclick="() => NavigateToTeamDetails(footballer.Id)">
                            <i class="fas fa-arrow-right"></i> Szczegóły
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
    private List<FootballerDTO>? favouriteFootballers;
    private AlertManager alertManager = new AlertManager();

    private string _userId = string.Empty;
    private bool _showModal = false;
    private int _footballerIdToRemove;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _userId = await GetUserId();
            await RefreshFavourites();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task RefreshFavourites()
    {
        favouriteFootballers = await Http.GetFromJsonAsync<List<FootballerDTO>>("api/favourites/favourite-footballers");
    }

    private void ShowRemoveModal(int footballerId)
    {
        _footballerIdToRemove = footballerId;
        _showModal = true;
    }

    private async Task HandleConfirm(bool confirmed)
    {
        if (confirmed)
        {
            await RemoveFromFavourites(_footballerIdToRemove);
        }
        _showModal = false;
    }

    private async Task HandleCancel()
    {
        _showModal = false;
    }

    private async Task<string?> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private async Task RemoveFromFavourites(int footballerId)
    {
        _userId = await GetUserId();

        if (_userId != null)
        {
            var response = await Http.DeleteAsync($"api/favourites/footballer/{footballerId}/{_userId}");
            var footballer = favouriteFootballers.FirstOrDefault(x => x.Id == footballerId);

            if (response.IsSuccessStatusCode)
            {
                alertManager.ShowAlert($"Usunięto piłkarza {footballer?.FirstName + " " + footballer?.LastName} z ulubionych.", "info");
                await RefreshFavourites();
            }
            else
            {
                alertManager.ShowAlert($"Nie udało się usunąć piłkarza {footballer?.FirstName + " " + footballer?.LastName} z ulubionych.", "danger");
            }
        }
    }

    private void NavigateToTeamDetails(int footballerId)
    {
        Navigation.NavigateTo($"/footballers/{footballerId}");
    }
}