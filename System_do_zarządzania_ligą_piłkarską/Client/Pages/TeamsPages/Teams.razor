@page "/teams"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System_do_zarządzania_ligą_piłkarską.Shared
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@attribute [Authorize]
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Drużyny</PageTitle>

@if (_alertManager.AlertVisibility)
{
    <div class="alert @($"alert-{_alertManager.AlertType}") alert-dismissible fade show" role="alert">
        @_alertManager.AlertMessage
        <button type="button" class="btn-close" aria-label="Close" @onclick="() => _alertManager.AlertVisibility = false"></button>
    </div>
}

<input type="text" @bind="searchQueryName" placeholder="Szukaj drużynę po nazwie..." class="form-control mb-3" />
<input type="text" @bind="searchQueryNationality" placeholder="Szukaj drużynę po kraju..." class="form-control mb-3" />

@if (_allTeams == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nazwa</th>
                <th>Kraj</th>
                <th>Miasto</th>
                <th>Stadion</th>
                <th>Dodaj do ulubionych</th>
                <th>Przejdź do drużyny</th>
            </tr>
        </thead>
        <tbody>
            @if (filteredTeams.Count() == 0)
            {
                <tr>
                    <td colspan="9" style="text-align: center">Brak drużyn lub żadna drużyna nie spełnia określonych kryteriów wyszukiwania.</td>
                </tr>
            }
            @foreach (var team in filteredTeams)
            {
                <tr>
                    <td>@team.Name</td>
                    <td>@team.Country</td>
                    <td>@team.City</td>
                    <td>@team.Stadium</td>
                    <td>
                        @if (IsFavourite(team.Id))
                        {
                            <button class="btn btn-primary" @onclick="() => RemoveFromFavourites(team.Id)">
                                <i class="fas fa-star"></i>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-secondary" @onclick="() => AddToFavourites(team.Id)">
                                <i class="fas fa-star"></i>
                            </button>
                        }
                    </td>
                    <td>
                        <NavLink href="@($"/teams/{team.Id}")" class="nav-link">
                            <i class="fas fa-trophy"></i>
                        </NavLink>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private TeamDTO[]? _allTeams;
    private FavouriteDTO[]? _allFavourites;
    private AlertManager _alertManager = new AlertManager();

    string userId = string.Empty;

    private string searchQueryName = string.Empty;
    private string searchQueryNationality = string.Empty;

    private string alertMessage = string.Empty;
    private string alertType = string.Empty;
    private bool alertVisibility = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userId = await GetUserId();
            _allTeams = await Http.GetFromJsonAsync<TeamDTO[]>("api/teams");
            await RefreshFavourites();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private bool IsFavourite(int teamId)
    {
        var isFavourite = _allFavourites.FirstOrDefault(x => x.FavouriteId == teamId) != null;
        return isFavourite;
    }

    private async Task RefreshFavourites()
    {
        _allFavourites = await Http.GetFromJsonAsync<FavouriteDTO[]>($"api/favourites/team");
    }

    private async Task<string?> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private async Task AddToFavourites(int teamId)
    {
        if (userId != null)
        {
            var response = await Http.PostAsync($"api/favourites/team/{teamId}", null);
            var team = _allTeams.FirstOrDefault(t => t.Id == teamId);

            if (response.IsSuccessStatusCode)
            {
                _alertManager.ShowAlert($"Dodano drużynę {team?.Name} do ulubionych!", "success");
                await RefreshFavourites();
            }
            else
            {
                _alertManager.ShowAlert($"Nie udało się dodać drużyny {team?.Name} do ulubionych.", "danger");
            }
        }
    }

    private async Task RemoveFromFavourites(int teamId)
    {
        if (userId != null)
        {
            var response = await Http.DeleteAsync($"api/favourites/team/{teamId}/{userId}");
            var team = _allTeams.FirstOrDefault(t => t.Id == teamId);

            if (response.IsSuccessStatusCode)
            {
                _alertManager.ShowAlert($"Usunięto drużynę {team?.Name} z ulubionych.", "info");
                await RefreshFavourites();
            }
            else
            {
                _alertManager.ShowAlert($"Nie udało się usunąć drużyny {team?.Name} z ulubionych.", "danger");
            }
        }
    }

    private IEnumerable<TeamDTO> filteredTeams =>
     _allTeams?.Where(team =>
         (string.IsNullOrWhiteSpace(searchQueryName) || team.Name.Contains(searchQueryName, StringComparison.OrdinalIgnoreCase)) &&
         (string.IsNullOrWhiteSpace(searchQueryNationality) || team.Country.Contains(searchQueryNationality, StringComparison.OrdinalIgnoreCase))
     );
}
