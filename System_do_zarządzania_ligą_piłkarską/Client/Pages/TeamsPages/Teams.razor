@page "/teams"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System_do_zarządzania_ligą_piłkarską.Shared
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using System_do_zarządzania_ligą_piłkarską.Client.Components

@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AlertManager AlertManager

<PageTitle>Drużyny</PageTitle>

<div class="container py-5">
    <div class="text-center mb-5">
        <h1 class="display-4 fw-bold text-primary">Drużyny</h1>
    </div>

    <div class="alert-placeholder mb-4">
        <Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />
    </div>

    <div class="card border-0 shadow-sm mb-5">
        <div class="card-body">
            <h5 class="card-title text-secondary fw-bold mb-4">Wyszukaj drużynę</h5>
            <div class="row g-4">
                <div class="col-lg-6">
                    <input type="text" @bind="searchQueryName" class="form-control form-control-lg" placeholder="🔍 Szukaj drużynę po nazwie..." />
                </div>
                <div class="col-lg-6">
                    <input type="text" @bind="searchQueryNationality" class="form-control form-control-lg" placeholder="🌍 Szukaj drużynę po kraju..." />
                </div>
            </div>
        </div>
    </div>

    @if (_allTeams == null)
    {
        <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Ładowanie...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <h5 class="card-title text-secondary fw-bold mb-4">Lista Drużyn</h5>
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead class="table-primary text-center">
                            <tr>
                                <th>Nazwa</th>
                                <th>Kraj</th>
                                <th>Miasto</th>
                                <th>Stadion</th>
                                <th>Ulubione</th>
                                <th>Szczegóły</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (filteredTeams.Count() == 0)
                            {
                                <tr>
                                    <td colspan="6" class="text-center text-muted">
                                        Brak drużyn lub żadna drużyna nie spełnia określonych kryteriów wyszukiwania.
                                    </td>
                                </tr>
                            }
                            @foreach (var team in filteredTeams)
                            {
                                <tr class="text-center">
                                    <td>@team.Name</td>
                                    <td>@team.Country</td>
                                    <td>@team.City</td>
                                    <td>@team.Stadium</td>
                                    <td>
                                        @if (IsFavourite(team.Id))
                                        {
                                            <button class="btn btn-primary btn-sm" @onclick="() => RemoveFromFavourites(team.Id)">
                                                <i class="fas fa-star"></i> Usuń
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-outline-secondary btn-sm" @onclick="() => AddToFavourites(team.Id)">
                                                <i class="far fa-star"></i> Dodaj
                                            </button>
                                        }
                                    </td>
                                    <td>
                                        <NavLink href="@($"/teams/{team.Id}")" class="btn btn-success btn-sm">
                                            <i class="fas fa-info-circle"></i> Przejdź
                                        </NavLink>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>


@code {
    private TeamDTO[]? _allTeams;
    private FavouriteDTO[]? _allFavourites;
    private AlertManager _alertManager = new AlertManager();

    string userId = string.Empty;

    private string searchQueryName = string.Empty;
    private string searchQueryNationality = string.Empty;

    private string alertMessage = string.Empty;
    private string alertType = string.Empty;
    private bool alertVisibility = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userId = await GetUserId();
            _allTeams = await Http.GetFromJsonAsync<TeamDTO[]>("api/teams");
            await RefreshFavourites();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private bool IsFavourite(int teamId)
    {
        var isFavourite = _allFavourites.FirstOrDefault(x => x.FavouriteId == teamId) != null;
        return isFavourite;
    }

    private async Task RefreshFavourites()
    {
        _allFavourites = await Http.GetFromJsonAsync<FavouriteDTO[]>($"api/favourites/team");
    }

    private async Task<string?> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private async Task AddToFavourites(int teamId)
    {
        if (userId != null)
        {
            var response = await Http.PostAsync($"api/favourites/team/{teamId}", null);
            var team = _allTeams.FirstOrDefault(t => t.Id == teamId);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Dodano drużynę {team?.Name} do ulubionych!", "success");
                await RefreshFavourites();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się dodać drużyny {team?.Name} do ulubionych.", "danger");
            }
        }
    }

    private async Task RemoveFromFavourites(int teamId)
    {
        if (userId != null)
        {
            var response = await Http.DeleteAsync($"api/favourites/team/{teamId}/{userId}");
            var team = _allTeams.FirstOrDefault(t => t.Id == teamId);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Usunięto drużynę {team?.Name} z ulubionych.", "info");
                await RefreshFavourites();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się usunąć drużyny {team?.Name} z ulubionych.", "danger");
            }
        }
    }

    private IEnumerable<TeamDTO>? filteredTeams =>
     _allTeams?.Where(team =>
         (string.IsNullOrWhiteSpace(searchQueryName) || team.Name.Contains(searchQueryName, StringComparison.OrdinalIgnoreCase)) &&
         (string.IsNullOrWhiteSpace(searchQueryNationality) || team.Country.Contains(searchQueryNationality, StringComparison.OrdinalIgnoreCase))
     );
}
