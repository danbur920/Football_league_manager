@page "/referees"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System_do_zarządzania_ligą_piłkarską.Shared
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using System_do_zarządzania_ligą_piłkarską.Client.Components

@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SearchQueryManager SearchQueryManager
@inject AlertManager AlertManager
@inject PaginationManager PaginationManager

<PageTitle>Sędziowie</PageTitle>

<div class="container py-5">
    <div class="text-center mb-5">
        <h1 class="display-4 fw-bold text-primary">Zarządzanie Sędziami</h1>
        <p class="lead text-muted">Przeglądaj, wyszukuj i zarządzaj swoimi ulubionymi sędziami!</p>
    </div>

    <div class="alert-placeholder mb-4">
        <Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />
    </div>

    <div class="card border-0 shadow-sm mb-5">
        <div class="card-body">
            <h5 class="card-title text-secondary fw-bold mb-4">Wyszukaj sędziego</h5>
            <div class="row g-4">
                <div class="col-lg-6">
                    <input type="text" @bind="SearchQueryManager.FirstName" class="form-control form-control-lg" placeholder="🔍 Szukaj sędziego po imieniu..." />
                </div>
                <div class="col-lg-6">
                    <input type="text" @bind="SearchQueryManager.LastName" class="form-control form-control-lg" placeholder="🌍 Szukaj sędziego po nazwisku..." />
                </div>
            </div>
        </div>
    </div>

    @if (allReferees == null)
    {
        <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Ładowanie...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <h5 class="card-title text-secondary fw-bold mb-4">Lista Sędziów</h5>
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead class="table-primary text-center">
                            <tr>
                                <th>Imię</th>
                                <th>Nazwisko</th>
                                <th>Narodowość</th>
                                <th>Poziom</th>
                                <th>Ulubione</th>
                                <th>Szczegóły</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (filteredReferees.Count() == 0)
                            {
                                <tr>
                                    <td colspan="6" class="text-center text-muted">
                                        Brak sędziów lub żaden sędzia nie spełnia określonych kryteriów wyszukiwania.
                                    </td>
                                </tr>
                            }
                            @foreach (var referee in filteredReferees)
                            {
                                <tr class="text-center">
                                    <td>@referee.FirstName</td>
                                    <td>@referee.LastName</td>
                                    <td>@referee.Nationality</td>
                                    <td>@referee.Level</td>
                                    <td>
                                        @if (IsFavourite(referee.Id))
                                        {
                                            <button class="btn btn-primary btn-sm" @onclick="() => RemoveFromFavourites(referee.Id)">
                                                <i class="fas fa-star"></i> Usuń
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-outline-secondary btn-sm" @onclick="() => AddToFavourites(referee.Id)">
                                                <i class="far fa-star"></i> Dodaj
                                            </button>
                                        }
                                    </td>
                                    <td>
                                        <NavLink href="@($"/referees/{referee.Id}")" class="btn btn-success btn-sm">
                                            <i class="fas fa-info-circle"></i> Przejdź
                                        </NavLink>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <nav aria-label="Referees Pagination" class="mt-4">
            <ul class="pagination justify-content-center">
                <li class="page-item @(PaginationManager.PageNumber == 1 ? "disabled" : "")">
                    <button class="page-link" @onclick="() => PaginationManager.PreviousPage(LoadReferees)">
                        Poprzednia
                    </button>
                </li>

                @for (int i = 1; i <= PaginationManager.PageMax; i++)
                {
                    <li class="page-item @(PaginationManager.PageNumber == i ? "active" : "")">
                        <button class="page-link" @onclick="() => PaginationManager.GoToPage(i, LoadReferees)">
                            @i
                        </button>
                    </li>
                }

                <li class="page-item @(PaginationManager.PageNumber == PaginationManager.PageMax ? "disabled" : "")">
                    <button class="page-link" @onclick="() => PaginationManager.NextPage(LoadReferees)">
                        Następna
                    </button>
                </li>
            </ul>
        </nav>
    }
    }
</div>


@code {
    private List<RefereeDTO>? allReferees;
    private List<FavouriteDTO>? userFavouriteReferees;

    private string _userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PaginationManager.PageMax = (int)Math.Ceiling((double)PaginationManager.CollectionCount / PaginationManager.PageSize);
            await GetUserId();
            await LoadReferees();
            await RefreshFavourites();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task<bool> LoadReferees()
    {
        var response = await Http.GetFromJsonAsync<List<RefereeDTO>>($"api/referees?pageNumber={PaginationManager.PageNumber}&pageSize={PaginationManager.PageSize}");
        allReferees = response;

        return (allReferees != null && allReferees.Any());
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private IEnumerable<RefereeDTO>? filteredReferees =>
    allReferees?.Where(referee =>
        (string.IsNullOrWhiteSpace(SearchQueryManager.FirstName) || referee.FirstName.Contains(SearchQueryManager.FirstName, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrWhiteSpace(SearchQueryManager.LastName) || referee.LastName.Contains(SearchQueryManager.LastName, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrWhiteSpace(SearchQueryManager.Country) || referee.Nationality.Contains(SearchQueryManager.Country, StringComparison.OrdinalIgnoreCase))
    );

    private bool IsFavourite(int refereeId)
    {
        var isFavourite = userFavouriteReferees.FirstOrDefault(x => x.FavouriteId == refereeId) != null;
        return isFavourite;
    }

    private async Task RefreshFavourites()
    {
        userFavouriteReferees = await Http.GetFromJsonAsync<List<FavouriteDTO>>($"api/favourites/referee");
    }

    private async Task AddToFavourites(int refereeId)
    {
        if (_userId != null)
        {
            var response = await Http.PostAsync($"api/favourites/referee/{refereeId}", null);
            var referee = allReferees.FirstOrDefault(l => l.Id == refereeId);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Dodano sędziego {referee?.FirstName + " " + referee?.LastName} do ulubionych!", "success");
                await RefreshFavourites();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się dodać sędziego {referee?.FirstName + " " + referee?.LastName} do ulubionych.", "danger");
            }
        }
    }

    private async Task RemoveFromFavourites(int refereeId)
    {
        if (_userId != null)
        {
            var response = await Http.DeleteAsync($"api/favourites/referee/{refereeId}/{_userId}");
            var referee = allReferees.FirstOrDefault(l => l.Id == refereeId);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Usunięto sędziego {referee?.FirstName + " " + referee?.LastName} z ulubionych.", "info");
                await RefreshFavourites();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się usunąć sędziego {referee?.FirstName + " " + referee?.LastName} z ulubionych.", "danger");
            }
        }
    }

    // private void NavigateToRefereeDetails(int refereeId)
    // {
    //     Navigation.NavigateTo($"/referees/{refereeId}");
    // }
}
