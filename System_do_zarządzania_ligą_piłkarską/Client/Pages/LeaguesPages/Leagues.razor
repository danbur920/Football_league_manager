@page "/leagues"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System_do_zarządzania_ligą_piłkarską.Shared
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using System_do_zarządzania_ligą_piłkarską.Client.Components

@inject PublicClient PublicHttpClient
@inject HttpClient PrivateHttpClient
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AlertManager AlertManager
@inject PaginationManager PaginationManager
@inject SearchQueryManager SearchQueryManager

<PageTitle>Ligi</PageTitle>

<div class="container py-5">
    <div class="text-center mb-5">
        <h1 class="display-4 fw-bold text-primary">Ligi</h1>
    </div>

    <div class="alert-placeholder mb-4">
        <Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />
    </div>

    <div class="card border-0 shadow-sm mb-5">
        <div class="card-body">
            <h5 class="card-title text-secondary fw-bold mb-4">Wyszukaj ligę</h5>
            <div class="row g-4">
                <div class="col-lg-6">
                    <input type="text" @bind="SearchQueryManager.Name" class="form-control form-control-lg" placeholder="🔍 Szukaj ligę po nazwie..." />
                </div>
                <div class="col-lg-6">
                    <input type="text" @bind="SearchQueryManager.Country" class="form-control form-control-lg" placeholder="🌍 Szukaj ligę po kraju..." />
                </div>
            </div>
        </div>
    </div>

    @if (allLeagues == null)
    {
        <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Ładowanie...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <h5 class="card-title text-secondary fw-bold mb-4">Lista Lig</h5>
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead class="table-primary text-center">
                            <tr>
                                <th>Nazwa</th>
                                <th>Kraj</th>
                                <th>Poziom</th>
                                <th>Sezon</th>
                                <th>Rozegrane mecze</th>
                                <th>Start ligi</th>
                                <th>Koniec ligi</th>
                                <th>Ulubione</th>
                                <th>Szczegóły</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (filteredLeagues.Count() == 0)
                            {
                                <tr>
                                    <td colspan="9" class="text-center text-muted">
                                        Brak lig lub żadna liga nie spełnia określonych kryteriów wyszukiwania.
                                    </td>
                                </tr>
                            }
                            @foreach (var league in filteredLeagues)
                            {
                                <tr class="text-center">
                                    <td>@league.LeagueInfo.Name</td>
                                    <td>@league.LeagueInfo.Country</td>
                                    <td>@league.LeagueInfo.Level</td>
                                    <td>@(league.Season.ToString().Substring(1))</td>
                                    <td>@league.MatchesPlayed</td>
                                    <td>@league.LeagueStartDate</td>
                                    <td>@league.LeagueEndDate</td>
                                    <td>
                                        @if (_userId != null)
                                        {
                                            @if (IsFavourite(league.Id))
                                            {
                                                <button class="btn btn-primary btn-sm" @onclick="() => RemoveFromFavourites(league.Id)">
                                                    <i class="fas fa-star"></i> Usuń
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => AddToFavourites(league.Id)">
                                                    <i class="far fa-star"></i> Dodaj
                                                </button>
                                            }
                                        }
                                        else
                                        {
                                            <i class="fas fa-lock text-muted"></i>
                                        }
                                    </td>
                                    <td>
                                        <NavLink href="@($"/leagues/{league.Id}")" class="btn btn-success btn-sm">
                                            <i class="fas fa-info-circle"></i> Przejdź
                                        </NavLink>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-4">
            <small class="text-muted">Strona @PaginationManager.PageNumber z @PaginationManager.PageMax</small>
            <PaginationBar PageNumber="PaginationManager.PageNumber"
                           PageIndex="PaginationManager.PageIndex"
                           PageMax="PaginationManager.PageMax"
                           CollectionCount="PaginationManager.CollectionCount"
                           OnNextPage="() => PaginationManager.NextPage(LoadLeagues)"
                           OnPreviousPage="() => PaginationManager.PreviousPage(LoadLeagues)"
                           OnGoToPage="(pageNumber) => PaginationManager.GoToPage(pageNumber, LoadLeagues)">
            </PaginationBar>
        </div>
    }
</div>


@code {
    private List<LeagueSeasonDTO>? allLeagues;
    private List<FavouriteDTO>? userFavouriteLeagues;

    private string? _userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        PaginationManager.PageMax = (int)Math.Ceiling((double)PaginationManager.CollectionCount / PaginationManager.PageSize);
        await GetUserId();
        await LoadLeagues();
        if(_userId != null)
        {
            await RefreshFavourites();
        }
    }

    private async Task<bool> LoadLeagues()
    {
        //var response = await Http.GetFromJsonAsync<List<LeagueSeasonDTO>>($"api/leagues?pageNumber={PaginationManager.PageNumber}&pageSize={PaginationManager.PageSize}");
        var response = await PublicHttpClient.Client.GetFromJsonAsync<List<LeagueSeasonDTO>>($"api/leagues?pageNumber={PaginationManager.PageNumber}&pageSize={PaginationManager.PageSize}");
        allLeagues = response;

        return (allLeagues != null && allLeagues.Any());
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user != null)
            _userId = user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private IEnumerable<LeagueSeasonDTO>? filteredLeagues =>
    allLeagues?.Where(league =>
        (string.IsNullOrWhiteSpace(SearchQueryManager.Name) || league.LeagueInfo.Name.Contains(SearchQueryManager.Name, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrWhiteSpace(SearchQueryManager.Country) || league.LeagueInfo.Country.Contains(SearchQueryManager.Country, StringComparison.OrdinalIgnoreCase))
    );

    private bool IsFavourite(int leagueId)
    {
        var isFavourite = userFavouriteLeagues.FirstOrDefault(x => x.FavouriteId == leagueId) != null;
        return isFavourite;
    }

    private async Task RefreshFavourites()
    {
        if (_userId != null)
        {
            userFavouriteLeagues = await PrivateHttpClient.GetFromJsonAsync<List<FavouriteDTO>>($"api/favourites/league");
        }
    }

    private async Task AddToFavourites(int leagueId)
    {
        if (_userId != null)
        {
            var response = await PrivateHttpClient.PostAsync($"api/favourites/league/{leagueId}", null);
            var league = allLeagues.FirstOrDefault(l => l.Id == leagueId);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Dodano ligę {league?.LeagueInfo.Name} do ulubionych!", "success");
                await RefreshFavourites();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się dodać ligi {league?.LeagueInfo.Name} do ulubionych.", "danger");
            }
        }
    }

    private async Task RemoveFromFavourites(int leagueId)
    {
        if (_userId != null)
        {
            var response = await PrivateHttpClient.DeleteAsync($"api/favourites/league/{leagueId}/{_userId}");
            var league = allLeagues.FirstOrDefault(l => l.Id == leagueId);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Usunięto ligę {league?.LeagueInfo.Name} z ulubionych.", "info");
                await RefreshFavourites();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się usunąć ligi {league?.LeagueInfo.Name} z ulubionych.", "danger");
            }
        }
    }
}
