@page "/leagues"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System_do_zarządzania_ligą_piłkarską.Shared
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using System_do_zarządzania_ligą_piłkarską.Client.Components
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AlertManager AlertManager

<PageTitle>Ligi</PageTitle>

<Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />

<input type="text" @bind="searchQueryName" placeholder="Szukaj ligę po nazwie..." class="form-control mb-3" />
<input type="text" @bind="searchQueryNationality" placeholder="Szukaj ligę po kraju..." class="form-control mb-3" />

@if (_allLeagues == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nazwa</th>
                <th>Kraj</th>
                <th>Poziom</th>
                <th>Sezon</th>
                <th>Rozegrane mecze</th>
                <th>Start ligi</th>
                <th>Koniec ligi</th>
                <th>Dodaj do ulubionych</th>
                <th>Przejdź do ligi</th>
            </tr>
        </thead>
        <tbody>
            @if(filteredLeagues.Count() == 0)
            {
                <tr>
                    <td colspan="9" style="text-align: center">Brak lig lub żadna liga nie spełnia określonych kryteriów wyszukiwania.</td>
                </tr>
            }
            @foreach (var league in filteredLeagues)
            {
                <tr>
                    <td>@league.Name</td>
                    <td>@league.Country</td>
                    <td>@league.Level</td>
                    <td>@league.Season</td>
                    <td>@league.MatchesPlayed</td>
                    <td>@league.LeagueStartDate</td>
                    <td>@league.LeagueEndDate</td>
                    <td>
                        @if (IsFavourite(league.Id))
                        {
                            <button class="btn btn-primary" @onclick="() => RemoveFromFavourites(league.Id)">
                                <i class="fas fa-star"></i> Usuń z ulubionych
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-secondary" @onclick="() => AddToFavourites(league.Id)">
                                <i class="fas fa-star"></i> Dodaj do ulubionych
                            </button>
                        }
                    </td>
                    <td>
                        <button class="btn btn-link" @onclick="() => NavigateToLeagueDetails(league.Id)">
                            <i class="fas fa-arrow-right"></i> Szczegóły
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private LeagueDTO[]? _allLeagues;
    private FavouriteDTO[]? _userFavouriteLeagues;

    string userId = string.Empty;
    private string searchQueryName = string.Empty;
    private string searchQueryNationality = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userId = await GetUserId();
            _allLeagues = await Http.GetFromJsonAsync<LeagueDTO[]>("api/leagues");
            await RefreshFavourites();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task<string?> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private IEnumerable<LeagueDTO> filteredLeagues =>
    _allLeagues?.Where(league =>
        (string.IsNullOrWhiteSpace(searchQueryName) || league.Name.Contains(searchQueryName, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrWhiteSpace(searchQueryNationality) || league.Country.Contains(searchQueryNationality, StringComparison.OrdinalIgnoreCase))
    );

    private bool IsFavourite(int leagueId)
    {
        var isFavourite = _userFavouriteLeagues.FirstOrDefault(x => x.FavouriteId == leagueId) != null;
        return isFavourite;
    }

    private async Task RefreshFavourites()
    {
        _userFavouriteLeagues = await Http.GetFromJsonAsync<FavouriteDTO[]>($"api/favourites/league");
    }

    private async Task AddToFavourites(int leagueId)
    {
        var userId = await GetUserId();

        if (userId != null)
        {
            var response = await Http.PostAsync($"api/favourites/league/{leagueId}", null);
            var league = _allLeagues.FirstOrDefault(l => l.Id == leagueId);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Dodano ligę {league?.Name} do ulubionych!", "success");
                await RefreshFavourites();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się dodać ligi {league?.Name} do ulubionych.", "danger");
            }
        }
    }

    private async Task RemoveFromFavourites(int leagueId)
    {
        var userId = await GetUserId();

        if (userId != null)
        {
            var response = await Http.DeleteAsync($"api/favourites/league/{leagueId}/{userId}");
            var league = _allLeagues.FirstOrDefault(l => l.Id == leagueId);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Usunięto ligę {league?.Name} z ulubionych.", "info");
                await RefreshFavourites();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się usunąć ligi {league?.Name} z ulubionych.", "danger");
            }
        }
    }

    private void NavigateToLeagueDetails(int leagueId)
    {
        Navigation.NavigateTo($"/leagues/{leagueId}");
    }
}
