@page "/create-league"

@using Microsoft.AspNetCore.Components.Forms
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs.Leagues
@using System_do_zarządzania_ligą_piłkarską.Client.Components
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs

@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AlertManager AlertManager

<PageTitle>Stwórz Ligę</PageTitle>

<div class="container py-5">
    <div class="text-center mb-5">
        <h1 class="display-4 fw-bold text-primary">Stwórz Ligę</h1>
    </div>

    <EditForm Model="newLeague" OnValidSubmit="HandleValidSubmit" class="needs-validation">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="name" class="form-label">Nazwa ligi</label>
            <InputText id="name" class="form-control" @bind-Value="newLeague.LeagueInfo.Name" />
        </div>

        <div class="mb-3">
            <label for="country" class="form-label">Kraj</label>
            <InputText id="country" class="form-control" @bind-Value="newLeague.LeagueInfo.Country" />
        </div>

        <div class="mb-3">
            <label for="level" class="form-label">Poziom (opcjonalnie)</label>
            <select id="level" class="form-select" @bind="newLeague.LeagueInfo.Level">
                @foreach (var level in Enum.GetValues(typeof(Level)).Cast<Level>())
                {
                    <option value="@level">@level</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label for="season" class="form-label">Sezon (opcjonalnie)</label>
            <select id="season" class="form-select" @bind="newLeague.LeagueSeason.Season">
                @foreach (var season in Enum.GetValues(typeof(Season)).Cast<Season>())
                {
                    <option value="@season">@(season.ToString().Substring(1))</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label for="startDate" class="form-label">Data rozpoczęcia ligi (opcjonalnie)</label>
            <InputDate id="startDate" class="form-control" @bind-Value="newLeague.LeagueSeason.LeagueStartDate" />
        </div>

        <div class="mb-3">
            <label for="endDate" class="form-label">Data zakończenia ligi (opcjonalnie)</label>
            <InputDate id="endDate" class="form-control" @bind-Value="newLeague.LeagueSeason.LeagueEndDate" />
        </div>

        <button type="submit" class="btn btn-primary">Dodaj ligę</button>
    </EditForm>

    <div class="mt-4">
        <Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />
    </div>
</div>

@code {
    private string _userId = string.Empty;
    private NewLeagueDTO newLeague = new NewLeagueDTO
    {
        LeagueInfo = new NewLeagueInfoDTO(),
        LeagueSeason = new NewLeagueSeasonDTO()
    };


    protected override async Task OnInitializedAsync()
    {
        await GetUserId();

    }

    private async Task<string> GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            newLeague.LeagueSeason.LeagueMasterId = await GetUserId();
            var response = await Http.PostAsJsonAsync("/api/leagues", newLeague);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Dodano ligę {newLeague.LeagueInfo.Name}!", "success");
                await Task.Delay(1000);
                Navigation.NavigateTo("/");
                Clear();
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                AlertManager.DisplayAlert($"Nie udało się dodać ligi {newLeague.LeagueInfo.Name}.", "danger");
            }
        }
        catch (Exception ex)
        {
            AlertManager.DisplayAlert($"Nie udało się dodać ligi {newLeague.LeagueInfo.Name}.", "danger");
        }
    }

    private void Clear()
    {
        newLeague.LeagueInfo.Name = string.Empty;
        newLeague.LeagueInfo.Country = string.Empty;
        newLeague.LeagueInfo.Level = null;
        newLeague.LeagueSeason.Season = null;
        newLeague.LeagueSeason.LeagueStartDate = null;
        newLeague.LeagueSeason.LeagueEndDate = null;
    }
}
