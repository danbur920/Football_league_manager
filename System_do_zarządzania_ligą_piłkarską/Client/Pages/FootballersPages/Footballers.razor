@page "/footballers"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System_do_zarządzania_ligą_piłkarską.Shared
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using System_do_zarządzania_ligą_piłkarską.Client.Components
@using Newtonsoft.Json
@using System_do_zarządzania_ligą_piłkarską.Shared.Enums

@inject PublicClient PublicHttpClient
@inject HttpClient PrivateHttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SearchQueryManager SearchQueryManager
@inject AlertManager AlertManager
@inject PaginationManager PaginationManager

<PageTitle>Piłkarze</PageTitle>

<div class="container py-5">
    <div class="text-center mb-5">
        <h1 class="display-4 fw-bold text-primary">Piłkarze</h1>
    </div>

    <div class="alert-placeholder mb-4">
        <Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />
    </div>

    <div class="card border-0 shadow-sm mb-5">
        <div class="card-body">
            <h5 class="card-title text-secondary fw-bold mb-4">Wyszukaj piłkarza</h5>
            <div class="row g-4">
                <div class="col-lg-4">
                    <input type="text" @bind="SearchQueryManager.FirstName" class="form-control form-control-lg" placeholder="🔍 Szukaj po imieniu..." />
                </div>
                <div class="col-lg-4">
                    <input type="text" @bind="SearchQueryManager.LastName" class="form-control form-control-lg" placeholder="🔍 Szukaj po nazwisku..." />
                </div>
                <div class="col-lg-4">
                    <input type="text" @bind="SearchQueryManager.Country" class="form-control form-control-lg" placeholder="🌍 Szukaj po kraju..." />
                </div>
                <div class="col-lg-6">
                    <input type="text" @bind="SearchQueryManager.Team" class="form-control form-control-lg" placeholder="🏟️ Szukaj po drużynie..." />
                </div>
                <div class="col-lg-6">
                    <input type="text" @bind="SearchQueryManager.Position" class="form-control form-control-lg" placeholder="📍 Szukaj po pozycji..." />
                </div>
            </div>
        </div>
    </div>

    @if (allFootballers == null)
    {
        <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Ładowanie...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <h5 class="card-title text-secondary fw-bold mb-4">Lista Piłkarzy</h5>
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle">
                        <thead class="table-primary text-center">
                            <tr>
                                <th>Imię</th>
                                <th>Nazwisko</th>
                                <th>Ksywa</th>
                                <th>Narodowość</th>
                                <th>Pozycja</th>
                                <th>Klub</th>
                                <th>Ulubione</th>
                                <th>Profil</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (filteredFootballer.Count() == 0)
                            {
                                <tr>
                                    <td colspan="8" class="text-center text-muted">
                                        Brak piłkarzy lub żaden piłkarz nie spełnia określonych kryteriów wyszukiwania.
                                    </td>
                                </tr>
                            }
                            @foreach (var footballer in filteredFootballer)
                            {
                                <tr class="text-center">
                                    <td>@footballer.FirstName</td>
                                    <td>@footballer.LastName</td>
                                    <td>@footballer.NickName</td>
                                    <td>@footballer.Nationality</td>
                                    <td>@PositionHelper.GetDisplayName(footballer.Position)</td>
                                    <td>@(footballer.Team?.Name ?? "Brak drużyny")</td>
                                    <td>
                                        @if (_userId != null)
                                        {
                                            @if (IsFavourite(footballer.Id))
                                            {
                                                <button class="btn btn-primary btn-sm" @onclick="() => RemoveFromFavourites(footballer.Id)">
                                                    <i class="fas fa-star"></i> Usuń
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => AddToFavourites(footballer.Id)">
                                                    <i class="far fa-star"></i> Dodaj
                                                </button>
                                            }
                                        }
                                        else
                                        {
                                            <i class="fas fa-lock text-muted"></i>
                                        }
                                    </td>
                                    <td>
                                        <NavLink href="@($"/footballers/{footballer.Id}")" class="btn btn-success btn-sm">
                                            <i class="fas fa-info-circle"></i> Przejdź
                                        </NavLink>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>



@code {
    private List<FootballerDTO>? allFootballers;
    private List<FavouriteDTO>? allFavourites;

    private string? _userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        PaginationManager.CollectionCount = await PublicHttpClient.Client.GetFromJsonAsync<int>("api/footballers/count"); // nie wiadomo dlaczego nie działa (postman zwraca prawidłowo)
        PaginationManager.PageMax = (int)Math.Ceiling((double)PaginationManager.CollectionCount / PaginationManager.PageSize);

        await GetUserId();
        await LoadPlayers();
        if (_userId != null)
        {
            await RefreshFavourites();
        }
    }

    private async Task SearchFootballersByFilters()
    {
        allFootballers = await PublicHttpClient.Client.GetFromJsonAsync<List<FootballerDTO>>($"api/footballers?firstName={SearchQueryManager.FirstName}&lastName={SearchQueryManager.LastName}&country={SearchQueryManager.Country}&team={SearchQueryManager.Team}&position={SearchQueryManager.Position}");
    }

    private async Task<bool> LoadPlayers()
    {
        var response = await PublicHttpClient.Client.GetFromJsonAsync<List<FootballerDTO>>($"api/footballers?pageNumber={PaginationManager.PageNumber}&pageSize={PaginationManager.PageSize}");
        if (response != null && response.Any())
        {
            allFootballers = response;
            return true;
        }
        return false;
    }


    private async Task RefreshFavourites()
    {
        allFavourites = await PrivateHttpClient.GetFromJsonAsync<List<FavouriteDTO>>($"api/favourites/footballer");
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private bool IsFavourite(int footballerId)
    {
        var isFavourite = allFavourites.FirstOrDefault(x => x.FavouriteId == footballerId) != null;
        return isFavourite;
    }

    private async Task AddToFavourites(int footballerId)
    {
        if (_userId != null)
        {
            var response = await PrivateHttpClient.PostAsync($"api/favourites/footballer/{footballerId}", null);
            var footballer = allFootballers.FirstOrDefault(t => t.Id == footballerId);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Dodano piłkarza {footballer?.FirstName + " " + footballer?.LastName} do ulubionych!", "success");
                await RefreshFavourites();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się dodać piłkarza {footballer?.FirstName + " " + footballer?.LastName} do ulubionych.", "danger");
            }
        }
    }

    private async Task RemoveFromFavourites(int footballerId)
    {
        if (_userId != null)
        {
            var response = await PrivateHttpClient.DeleteAsync($"api/favourites/footballer/{footballerId}/{_userId}");
            var footballer = allFootballers.FirstOrDefault(t => t.Id == footballerId);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Usunięto piłkarza {footballer?.FirstName + " " + footballer?.LastName} z ulubionych.", "info");
                await RefreshFavourites();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się usunąć piłkarza {footballer?.FirstName + " " + footballer?.LastName} z ulubionych.", "danger");
            }
        }
    }

    private IEnumerable<FootballerDTO>? filteredFootballer =>
     allFootballers?.Where(footballer => (string.IsNullOrWhiteSpace(SearchQueryManager.FirstName) || footballer.FirstName.Contains(SearchQueryManager.FirstName, StringComparison.OrdinalIgnoreCase)) &&
     (string.IsNullOrWhiteSpace(SearchQueryManager.LastName) || footballer.LastName.Contains(SearchQueryManager.LastName, StringComparison.OrdinalIgnoreCase)) &&
     (string.IsNullOrWhiteSpace(SearchQueryManager.Country) || footballer.Nationality.Contains(SearchQueryManager.Country, StringComparison.OrdinalIgnoreCase)) &&
     (string.IsNullOrWhiteSpace(SearchQueryManager.Team) || footballer.Team.Name.Contains(SearchQueryManager.Team, StringComparison.OrdinalIgnoreCase)) &&
     (string.IsNullOrWhiteSpace(SearchQueryManager.Position) || PositionHelper.GetDisplayName(footballer.Position).Contains(SearchQueryManager.Position, StringComparison.OrdinalIgnoreCase)));
}