@page "/footballers"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System_do_zarządzania_ligą_piłkarską.Shared
@using System_do_zarządzania_ligą_piłkarską.Shared.DTOs
@using System_do_zarządzania_ligą_piłkarską.Client.Extensions
@using System_do_zarządzania_ligą_piłkarską.Client.Components
@using System.Text.Json
@using Newtonsoft.Json

@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SearchQueryManager SearchQueryManager
@inject AlertManager AlertManager
@inject PaginationManager PaginationManager

<PageTitle>Piłkarze</PageTitle>

<Alert Message="@AlertManager.Message" Type="@AlertManager.Type" IsVisible="@AlertManager.IsVisible" />

<input type="text" @bind="SearchQueryManager.FirstName" placeholder="Szukaj piłkarza po imieniu..." class="form-control mb-3" />
<input type="text" @bind="SearchQueryManager.LastName" placeholder="Szukaj piłkarza po nazwisku..." class="form-control mb-3" />
<input type="text" @bind="SearchQueryManager.Country" placeholder="Szukaj piłkarza po kraju..." class="form-control mb-3" />
<input type="text" @bind="SearchQueryManager.Team" placeholder="Szukaj piłkarza po drużynie..." class="form-control mb-3" />
<input type="text" @bind="SearchQueryManager.Position" placeholder="Szukaj piłkarza po pozycji..." class="form-control mb-3" />

<button class="btn btn-primary" @onclick="SearchFootballersByFilters">
    <i class="fas fa-search"></i> Szukaj
</button>

@if (allFootballers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Imię</th>
                <th>Nazwisko</th>
                <th>Ksywa</th>
                <th>Narodowość</th>
                <th>Pozycja</th>
                <th>Klub</th>
                <th>Dodaj do ulubionych</th>
                <th>Profil piłkarza</th>
            </tr>
        </thead>
        <tbody>
            @if (allFootballers.Count() == 0)
            {
                <tr>
                    <td colspan="9" style="text-align: center">Brak piłkarzy lub żaden piłkarz nie spełnia określonych kryteriów wyszukiwania.</td>
                </tr>
            }
            @foreach (var footballer in filteredFootballer)
            {
                <tr>
                    <td>@footballer.FirstName</td>
                    <td>@footballer.LastName</td>
                    <td>@footballer.NickName</td>
                    <td>@footballer.Nationality</td>
                    <td>@footballer.Position</td>
                    <td>@footballer.Team.Name</td>
                    <td>
                        @if (IsFavourite(footballer.Id))
                        {
                            <button class="btn btn-primary" @onclick="() => RemoveFromFavourites(footballer.Id)">
                                <i class="fas fa-star"></i>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-secondary" @onclick="() => AddToFavourites(footballer.Id)">
                                <i class="fas fa-star"></i>
                            </button>
                        }
                    </td>
                    <td>
                        <NavLink href="@($"/footballers/{footballer.Id}")" class="nav-link">
                            <i class="fas fa-trophy"></i>
                        </NavLink>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <PaginationBar PageNumber="PaginationManager.PageNumber"
                   PageIndex="PaginationManager.PageIndex"
                   PageMax="PaginationManager.PageMax"
                   CollectionCount="PaginationManager.CollectionCount"
                   OnNextPage="() => PaginationManager.NextPage(LoadPlayers)"
                   OnPreviousPage="() => PaginationManager.PreviousPage(LoadPlayers)"
                   OnGoToPage="(pageNumber) => PaginationManager.GoToPage(pageNumber, LoadPlayers)">
    </PaginationBar>
}

@code {
    private List<FootballerDTO>? allFootballers = new List<FootballerDTO>();
    private List<FavouriteDTO>? allFavourites;

    private string _userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            PaginationManager.CollectionCount = await Http.GetFromJsonAsync<int>("api/footballers/count"); // nie wiadomo dlaczego nie działa (postman zwraca prawidłowo)
            PaginationManager.PageMax = (int)Math.Ceiling((double)PaginationManager.CollectionCount / PaginationManager.PageSize);

            await GetUserId();
            await LoadPlayers();
            await RefreshFavourites();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task SearchFootballersByFilters()
    {
        allFootballers = await Http.GetFromJsonAsync<List<FootballerDTO>>($"api/footballers?firstName={SearchQueryManager.FirstName}&lastName={SearchQueryManager.LastName}&country={SearchQueryManager.Country}&team={SearchQueryManager.Team}&position={SearchQueryManager.Position}");
    }

    private async Task<bool> LoadPlayers()
    {
        var response = await Http.GetFromJsonAsync<List<FootballerDTO>>($"api/footballers?pageNumber={PaginationManager.PageNumber}&pageSize={PaginationManager.PageSize}");
        if (response != null && response.Any())
        {
            allFootballers = response;
            return true;
        }
        return false;
    }


    private async Task RefreshFavourites()
    {
        allFavourites = await Http.GetFromJsonAsync<List<FavouriteDTO>>($"api/favourites/footballer");
    }

    private async Task GetUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.FindFirst(c => c.Type == "sub")?.Value;
    }

    private bool IsFavourite(int footballerId)
    {
        var isFavourite = allFavourites.FirstOrDefault(x => x.FavouriteId == footballerId) != null;
        return isFavourite;
    }

    private async Task AddToFavourites(int footballerId)
    {
        if (_userId != null)
        {
            var response = await Http.PostAsync($"api/favourites/footballer/{footballerId}", null);
            var footballer = allFootballers.FirstOrDefault(t => t.Id == footballerId);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Dodano piłkarza {footballer?.FirstName + " " + footballer?.LastName} do ulubionych!", "success");
                await RefreshFavourites();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się dodać piłkarza {footballer?.FirstName + " " + footballer?.LastName} do ulubionych.", "danger");
            }
        }
    }

    private async Task RemoveFromFavourites(int footballerId)
    {
        if (_userId != null)
        {
            var response = await Http.DeleteAsync($"api/favourites/footballer/{footballerId}/{_userId}");
            var footballer = allFootballers.FirstOrDefault(t => t.Id == footballerId);

            if (response.IsSuccessStatusCode)
            {
                AlertManager.DisplayAlert($"Usunięto piłkarza {footballer?.FirstName + " " + footballer?.LastName} z ulubionych.", "info");
                await RefreshFavourites();
            }
            else
            {
                AlertManager.DisplayAlert($"Nie udało się usunąć piłkarza {footballer?.FirstName + " " + footballer?.LastName} z ulubionych.", "danger");
            }
        }
    }

    private IEnumerable<FootballerDTO>? filteredFootballer =>
     allFootballers?.Where(footballer => (string.IsNullOrWhiteSpace(SearchQueryManager.FirstName) || footballer.FirstName.Contains(SearchQueryManager.FirstName, StringComparison.OrdinalIgnoreCase)) &&
     (string.IsNullOrWhiteSpace(SearchQueryManager.LastName) || footballer.LastName.Contains(SearchQueryManager.LastName, StringComparison.OrdinalIgnoreCase)) &&
     (string.IsNullOrWhiteSpace(SearchQueryManager.Country) || footballer.Nationality.Contains(SearchQueryManager.Country, StringComparison.OrdinalIgnoreCase)) &&
     (string.IsNullOrWhiteSpace(SearchQueryManager.Team) || footballer.Team.Name.Contains(SearchQueryManager.Team, StringComparison.OrdinalIgnoreCase)) &&
     (string.IsNullOrWhiteSpace(SearchQueryManager.Position) || footballer.Position.Contains(SearchQueryManager.Position, StringComparison.OrdinalIgnoreCase)));
}

<style>
    .pagination {
        display: flex;
        padding-left: 0;
        list-style: none;
        border-radius: 0.25rem;
    }

    .page-item {
        margin: 0 0.25rem;
    }

        .page-item .page-link {
            position: relative;
            display: block;
            padding: 0.5rem 0.75rem;
            margin-left: -1px;
            line-height: 1.25;
            color: #007bff;
            background-color: #fff;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
            transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out;
        }

            .page-item .page-link:hover {
                color: #0056b3;
                text-decoration: none;
                background-color: #e9ecef;
                border-color: #dee2e6;
                cursor: pointer;
            }

        .page-item.active .page-link {
            z-index: 1;
            color: #fff;
            background-color: #0056b3;
            border-color: #0056b3;
        }

        .page-item.disabled .page-link {
            color: #6c757d;
            pointer-events: none;
            background-color: #fff;
            border-color: #dee2e6;
        }
</style>

