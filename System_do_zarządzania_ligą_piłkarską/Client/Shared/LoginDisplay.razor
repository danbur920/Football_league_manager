@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
        <a href="authentication/profile">Hello, @context.User.Identity?.Name!</a>
        <button class="nav-link btn btn-link" @onclick="BeginLogOut">Log out</button>
        <a href="/">Strona główna</a>

        @if (checkUserRole == "Admin")
        {
            <a href="admin/start">Admin Panel</a>
        }
        else if(checkUserRole == "LeagueMaster")
        {
            <a href="league-master/start">League Master Panel</a>
        }
    </Authorized>
    <NotAuthorized>
        <a href="authentication/register">Register</a>
        <a href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    string checkUserRole;
    protected override async Task OnInitializedAsync()
    {
        checkUserRole = await CheckUserRole();
    }
    private void BeginLogOut()
    {

        Navigation.NavigateToLogout("authentication/logout");
    }

    private async Task<string> CheckUserRole()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        string role;

        return user.IsInRole("Admin") ? "Admin" : (user.IsInRole("LeagueMaster") ? "LeagueMaster" : "-");
    }
}
