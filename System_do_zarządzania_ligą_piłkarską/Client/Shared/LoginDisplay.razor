@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>
        <div class="header-container">
            <span class="header-text">⚽ System do zarządzania ligą piłkarską ⚽</span>
            <div class="action-buttons">
                <a href="/" class="btn btn-light m-1">Strona główna</a>
                <a href="authentication/profile" class="btn btn-light m-1">Zarządzaj kontem</a>

                @if (checkUserRole == "Admin")
                {
                    <a href="admin/start" class="btn btn-primary m-1">Panel Admina</a>
                }
                else if (checkUserRole == "LeagueMaster")
                {
                    <a href="league-master/start" class="btn btn-primary m-1">Panel zarządcy</a>
                }

                <button class="btn btn-outline-light m-1" @onclick="BeginLogOut">Wyloguj się</button>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="header-container">
            <span class="header-text">⚽ System do zarządzania ligą piłkarską ⚽</span>
            <div class="action-buttons">
                <a href="authentication/register" class="btn btn-outline-light m-1">Rejestracja</a>
                <a href="authentication/login" class="btn btn-outline-light m-1">Logowanie</a>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>



@code {
    string checkUserRole;
    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        checkUserRole = await CheckUserRole();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        var user = authState.User;

        checkUserRole = await CheckUserRole();
        StateHasChanged();
    }

    private void BeginLogOut()
    {

        Navigation.NavigateToLogout("authentication/logout");
    }

    private async Task<string> CheckUserRole()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        return user.IsInRole("Admin") ? "Admin" : (user.IsInRole("LeagueMaster") ? "LeagueMaster" : "-");
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
<style>
    .header-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        padding: 0 1rem;
        box-sizing: border-box;
    }

    .header-text {
        font-size: 1.25rem;
        font-weight: bold;
        color: white;
        flex-shrink: 0;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
        justify-content: flex-end;
    }
</style>